"""File Generated by Sideko (sideko.dev)"""

import pytest
from zoom_team_chat import AsyncClient, Client
from os import getenv
from pydantic import TypeAdapter
import typing

# test sync & async methods (keep comment for code generation)


def test_create_201_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.im.group.member.create(
        group_id="SobVexyrQjqCkcxjpBWi6w",
        data={
            "members": [
                {"email": "jchill@example\.com", "id": "v4iyWT1LTfy8QvPG4GTvdg"}
            ]
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_create_201_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.im.group.member.create(
        group_id="SobVexyrQjqCkcxjpBWi6w",
        data={
            "members": [
                {"email": "jchill@example\.com", "id": "v4iyWT1LTfy8QvPG4GTvdg"}
            ]
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_create_200_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.im.group.member.create(
        group_id="SobVexyrQjqCkcxjpBWi6w",
        data={
            "members": [
                {"email": "jchill@example\.com", "id": "v4iyWT1LTfy8QvPG4GTvdg"}
            ]
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_create_200_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.im.group.member.create(
        group_id="SobVexyrQjqCkcxjpBWi6w",
        data={
            "members": [
                {"email": "jchill@example\.com", "id": "v4iyWT1LTfy8QvPG4GTvdg"}
            ]
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_update_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.im.group.member.update(
        group_id="SobVexyrQjqCkcxjpBWi6w",
        next_page_token="IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
        page_number=1,
        page_size=30,
    )
    adapter = TypeAdapter(typing.Dict[str, typing.Any])
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_update_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.im.group.member.update(
        group_id="SobVexyrQjqCkcxjpBWi6w",
        next_page_token="IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
        page_number=1,
        page_size=30,
    )
    adapter = TypeAdapter(typing.Dict[str, typing.Any])
    adapter.validate_python(response)


def test_delete_204_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.im.group.member.delete(
        group_id="SobVexyrQjqCkcxjpBWi6w", member_id="v4iyWT1LTfy8QvPG4GTvdg"
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_delete_204_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.im.group.member.delete(
        group_id="SobVexyrQjqCkcxjpBWi6w", member_id="v4iyWT1LTfy8QvPG4GTvdg"
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_delete_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.im.group.member.delete(
        group_id="SobVexyrQjqCkcxjpBWi6w", member_id="v4iyWT1LTfy8QvPG4GTvdg"
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_delete_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.im.group.member.delete(
        group_id="SobVexyrQjqCkcxjpBWi6w", member_id="v4iyWT1LTfy8QvPG4GTvdg"
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)
