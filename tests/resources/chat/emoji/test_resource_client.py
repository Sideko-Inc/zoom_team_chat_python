"""File Generated by Sideko (sideko.dev)"""

import pytest
from zoom_team_chat import AsyncClient, Client
from os import getenv
from pydantic import TypeAdapter
from zoom_team_chat.types.chat.emoji import models

# test sync & async methods (keep comment for code generation)


def test_create_201_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.emoji.create(
        data={"name": "happy", "file": open("tests/fixtures/file.pdf", "rb")}
    )
    adapter = TypeAdapter(models.PostChatEmojiFilesResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_create_201_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.emoji.create(
        data={"name": "happy", "file": open("tests/fixtures/file.pdf", "rb")}
    )
    adapter = TypeAdapter(models.PostChatEmojiFilesResponse)
    adapter.validate_python(response)


def test_list_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.emoji.list(
        next_page_token="32\.0,\-9223372036854775808,1704438757798,so6Q0cltRtiHe7w_5lM39Q",
        page_size=10,
        search_key="hello",
    )
    adapter = TypeAdapter(models.GetChatEmojiResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_list_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.emoji.list(
        next_page_token="32\.0,\-9223372036854775808,1704438757798,so6Q0cltRtiHe7w_5lM39Q",
        page_size=10,
        search_key="hello",
    )
    adapter = TypeAdapter(models.GetChatEmojiResponse)
    adapter.validate_python(response)


def test_delete_204_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.emoji.delete(file_id="qgH9UN5YSsuBEMuKBHs34Q")
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_delete_204_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.emoji.delete(file_id="qgH9UN5YSsuBEMuKBHs34Q")
    adapter = TypeAdapter(None)
    adapter.validate_python(response)
