"""File Generated by Sideko (sideko.dev)"""

import pytest
from zoom_team_chat import AsyncClient, Client
from os import getenv
from zoom_team_chat.types.chat.message.bookmark import models
from pydantic import TypeAdapter

# test sync & async methods (keep comment for code generation)


def test_update_204_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.message.bookmark.update(
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        data={
            "action": "add_bookmark",
            "to_channel": "825c9e31f1064c73b394c5e4557d3447",
            "to_contact": "jchill@example\.com",
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_update_204_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.message.bookmark.update(
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        data={
            "action": "add_bookmark",
            "to_channel": "825c9e31f1064c73b394c5e4557d3447",
            "to_contact": "jchill@example\.com",
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_list_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.message.bookmark.list(
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size=10,
        to_channel="qrstuvwxyz67890",
        to_contact="CxabcD3ojfdbjfg",
    )
    adapter = TypeAdapter(models.GetChatMessagesBookmarksResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_list_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.message.bookmark.list(
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size=10,
        to_channel="qrstuvwxyz67890",
        to_contact="CxabcD3ojfdbjfg",
    )
    adapter = TypeAdapter(models.GetChatMessagesBookmarksResponse)
    adapter.validate_python(response)
