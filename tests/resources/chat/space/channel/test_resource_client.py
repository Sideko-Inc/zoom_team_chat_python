"""File Generated by Sideko (sideko.dev)"""

import pytest
from zoom_team_chat import AsyncClient, Client
from os import getenv
from zoom_team_chat.types.chat.space.channel import models
from pydantic import TypeAdapter

# test sync & async methods (keep comment for code generation)


def test_move_200_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.space.channel.move(
        space_id="8609fdea87b44e2f8e0f21ef3906046c",
        data={
            "channel_ids": ["8609fdea87b44e2f8e08609fdea87b44e2f8e0"],
            "move_direction": "move_into",
        },
    )
    adapter = TypeAdapter(models.PatchChatSpacesSpaceIdChannelsResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_move_200_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.space.channel.move(
        space_id="8609fdea87b44e2f8e0f21ef3906046c",
        data={
            "channel_ids": ["8609fdea87b44e2f8e08609fdea87b44e2f8e0"],
            "move_direction": "move_into",
        },
    )
    adapter = TypeAdapter(models.PatchChatSpacesSpaceIdChannelsResponse)
    adapter.validate_python(response)


def test_list_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.space.channel.list(
        space_id="bb31fa470fdc410cb76527282aa380d4",
        next_page_token="IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
        page_size=30,
    )
    adapter = TypeAdapter(models.GetChatSpacesSpaceIdChannelsResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_list_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.space.channel.list(
        space_id="bb31fa470fdc410cb76527282aa380d4",
        next_page_token="IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2",
        page_size=30,
    )
    adapter = TypeAdapter(models.GetChatSpacesSpaceIdChannelsResponse)
    adapter.validate_python(response)
