"""File Generated by Sideko (sideko.dev)"""

import pytest
from zoom_team_chat import AsyncClient, Client
from os import getenv
from pydantic import TypeAdapter
from zoom_team_chat.types.chat.space import models

# test sync & async methods (keep comment for code generation)


def test_create_201_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.space.create(
        data={
            "space_name": "Developer Group",
            "space_desc": "Developer discussion group\.",
            "space_members": [
                {"identifier": "1vRFhZt_2gipkB\-SFKkOpnkh", "role": "admin"}
            ],
            "space_settings": {
                "allow_to_add_external_users": 0,
                "add_member_permissions": 1,
                "create_channels_permission": 1,
            },
        }
    )
    adapter = TypeAdapter(models.PostChatSpacesResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_create_201_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.space.create(
        data={
            "space_name": "Developer Group",
            "space_desc": "Developer discussion group\.",
            "space_members": [
                {"identifier": "1vRFhZt_2gipkB\-SFKkOpnkh", "role": "admin"}
            ],
            "space_settings": {
                "allow_to_add_external_users": 0,
                "add_member_permissions": 1,
                "create_channels_permission": 1,
            },
        }
    )
    adapter = TypeAdapter(models.PostChatSpacesResponse)
    adapter.validate_python(response)


def test_transfer_owner_204_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.space.transfer_owner(
        space_id="8609fdea87b44e2f8e0", identifier="zqmgs2tmspguoqcxyahsya"
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_transfer_owner_204_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.space.transfer_owner(
        space_id="8609fdea87b44e2f8e0", identifier="zqmgs2tmspguoqcxyahsya"
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_update_204_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.space.update(
        space_id="asdjfdwyntuuq3yqpmoixdq",
        data={
            "space_name": "Dev Space",
            "space_desc": "A dev's space\.",
            "space_settings": {
                "allow_to_add_external_users": 0,
                "add_member_permissions": 1,
                "create_channels_permission": 1,
            },
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_update_204_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.space.update(
        space_id="asdjfdwyntuuq3yqpmoixdq",
        data={
            "space_name": "Dev Space",
            "space_desc": "A dev's space\.",
            "space_settings": {
                "allow_to_add_external_users": 0,
                "add_member_permissions": 1,
                "create_channels_permission": 1,
            },
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_get_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.space.get(space_id="bb31fa470fdc410cb76527282aa380d4")
    adapter = TypeAdapter(models.GetChatSpacesSpaceIdResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_get_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.space.get(space_id="bb31fa470fdc410cb76527282aa380d4")
    adapter = TypeAdapter(models.GetChatSpacesSpaceIdResponse)
    adapter.validate_python(response)


def test_list_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.space.list(
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size="30",
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
    )
    adapter = TypeAdapter(models.GetChatSpacesResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_list_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.space.list(
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size="30",
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
    )
    adapter = TypeAdapter(models.GetChatSpacesResponse)
    adapter.validate_python(response)


def test_delete_204_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.space.delete(space_id="8609fdea87b44e2f8e0")
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_delete_204_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.space.delete(space_id="8609fdea87b44e2f8e0")
    adapter = TypeAdapter(None)
    adapter.validate_python(response)
