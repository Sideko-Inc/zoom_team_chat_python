"""File Generated by Sideko (sideko.dev)"""

import pytest
from zoom_team_chat import AsyncClient, Client
from os import getenv
from pydantic import TypeAdapter
from zoom_team_chat.types.chat.legalhold.matter import models

# test sync & async methods (keep comment for code generation)


def test_create_201_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.legalhold.matter.create(
        data={
            "start_date": "2024\-04\-01",
            "end_date": "2024\-04\-30",
            "matter_name": "Test17888",
            "identifiers": ["first\.last@test\.com"],
        }
    )
    adapter = TypeAdapter(models.PostChatLegalholdMattersResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_create_201_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.legalhold.matter.create(
        data={
            "start_date": "2024\-04\-01",
            "end_date": "2024\-04\-30",
            "matter_name": "Test17888",
            "identifiers": ["first\.last@test\.com"],
        }
    )
    adapter = TypeAdapter(models.PostChatLegalholdMattersResponse)
    adapter.validate_python(response)


def test_update_204_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.legalhold.matter.update(
        matter_id="28c92682\-f4fc\-47b0\-bceb\-14cb839e0279",
        data={"matter_name": "NewTest17888"},
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_update_204_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.legalhold.matter.update(
        matter_id="28c92682\-f4fc\-47b0\-bceb\-14cb839e0279",
        data={"matter_name": "NewTest17888"},
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_list_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.legalhold.matter.list(
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42", page_size=30
    )
    adapter = TypeAdapter(models.GetChatLegalholdMattersResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_list_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.legalhold.matter.list(
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42", page_size=30
    )
    adapter = TypeAdapter(models.GetChatLegalholdMattersResponse)
    adapter.validate_python(response)


def test_delete_204_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.legalhold.matter.delete(
        matter_id="28c92682\-f4fc\-47b0\-bceb\-14cb839e0279"
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_delete_204_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.legalhold.matter.delete(
        matter_id="28c92682\-f4fc\-47b0\-bceb\-14cb839e0279"
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)
