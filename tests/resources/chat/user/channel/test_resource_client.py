"""File Generated by Sideko (sideko.dev)"""

import pytest
from zoom_team_chat import Client, AsyncClient
from os import getenv
from pydantic import TypeAdapter
from zoom_team_chat.types.chat.user.channel import models

# test sync & async methods (keep comment for code generation)


def test_create_201_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.channel.create(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        data={
            "channel_settings": {
                "add_member_permissions": 2,
                "new_members_can_see_previous_messages_files": True,
                "posting_permissions": 3,
                "mention_all_permissions": 1,
            },
            "members": [{"email": "jchill@example\.com"}],
            "name": "Developers",
            "type": 2,
        },
    )
    adapter = TypeAdapter(models.PostChatUsersUserIdChannelsResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_create_201_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.channel.create(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        data={
            "channel_settings": {
                "add_member_permissions": 2,
                "new_members_can_see_previous_messages_files": True,
                "posting_permissions": 3,
                "mention_all_permissions": 1,
            },
            "members": [{"email": "jchill@example\.com"}],
            "name": "Developers",
            "type": 2,
        },
    )
    adapter = TypeAdapter(models.PostChatUsersUserIdChannelsResponse)
    adapter.validate_python(response)


def test_update_204_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.channel.update(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        channel_id="825c9e31f1064c73b394c5e4557d3447",
        data={
            "name": "Developers Chat",
            "channel_settings": {
                "add_member_permissions": 2,
                "new_members_can_see_previous_messages_files": True,
                "posting_permissions": 3,
                "mention_all_permissions": 1,
                "designated_posting_members": [{"user_id": "alsjdflasjfasjfas"}],
            },
            "type": 1,
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_update_204_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.channel.update(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        channel_id="825c9e31f1064c73b394c5e4557d3447",
        data={
            "name": "Developers Chat",
            "channel_settings": {
                "add_member_permissions": 2,
                "new_members_can_see_previous_messages_files": True,
                "posting_permissions": 3,
                "mention_all_permissions": 1,
                "designated_posting_members": [{"user_id": "alsjdflasjfasjfas"}],
            },
            "type": 1,
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_get_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.channel.get(
        user_id="v4iyWT1LTfy8QvPG4GTvdg", channel_id="825c9e31f1064c73b394c5e4557d3447"
    )
    adapter = TypeAdapter(models.GetChatUsersUserIdChannelsChannelIdResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_get_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.channel.get(
        user_id="v4iyWT1LTfy8QvPG4GTvdg", channel_id="825c9e31f1064c73b394c5e4557d3447"
    )
    adapter = TypeAdapter(models.GetChatUsersUserIdChannelsChannelIdResponse)
    adapter.validate_python(response)


def test_list_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.channel.list(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size=10,
    )
    adapter = TypeAdapter(models.GetChatUsersUserIdChannelsResponseUnion)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_list_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.channel.list(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size=10,
    )
    adapter = TypeAdapter(models.GetChatUsersUserIdChannelsResponseUnion)
    adapter.validate_python(response)


def test_delete_204_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.channel.delete(
        user_id="v4iyWT1LTfy8QvPG4GTvdg", channel_id="825c9e31f1064c73b394c5e4557d3447"
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_delete_204_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.channel.delete(
        user_id="v4iyWT1LTfy8QvPG4GTvdg", channel_id="825c9e31f1064c73b394c5e4557d3447"
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_batch_delete_202_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.channel.batch_delete(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        channel_ids="825c9e31f1064c73b394c5e4557d3447,4n5c9t31f1064c787f394c5enng7d3553",
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_batch_delete_202_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.channel.batch_delete(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        channel_ids="825c9e31f1064c73b394c5e4557d3447,4n5c9t31f1064c787f394c5enng7d3553",
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)
