"""File Generated by Sideko (sideko.dev)"""

import pytest
from zoom_team_chat import Client, AsyncClient
from os import getenv
from pydantic import TypeAdapter
from zoom_team_chat.types.chat.user.message import models

# test sync & async methods (keep comment for code generation)


def test_update_204_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.message.update(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        data={
            "message": "Hello there\.",
            "to_channel": "825c9e31f1064c73b394c5e4557d3447",
            "to_contact": "jchill@example\.com",
            "file_ids": ["M87v\-bbmRGKCtl8nGNggvA"],
            "interactive_cards": [{"card_id": "xBvggqyjQUal6TecwMlYwQ"}],
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_update_204_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.message.update(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        data={
            "message": "Hello there\.",
            "to_channel": "825c9e31f1064c73b394c5e4557d3447",
            "to_contact": "jchill@example\.com",
            "file_ids": ["M87v\-bbmRGKCtl8nGNggvA"],
            "interactive_cards": [{"card_id": "xBvggqyjQUal6TecwMlYwQ"}],
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_send_201_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.message.send(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        data={
            "at_items": [
                {
                    "at_contact": "jchill@example\.com",
                    "at_type": 2,
                    "end_position": 8,
                    "start_position": 0,
                }
            ],
            "rich_text": [
                {
                    "start_position": 0,
                    "end_position": 1,
                    "format_type": "Paragraph",
                    "format_attr": "h1",
                }
            ],
            "message": "Hello",
            "file_ids": ["M87v\-bbmRGKCtl8nGNggvA"],
            "reply_main_message_id": "\{27ED2949\-6457\-417C\-83EA\-72515DAF00BD\}",
            "to_channel": "825c9e31f1064c73b394c5e4557d3447",
            "to_contact": "jchill@example\.com",
            "interactive_cards": [
                {
                    "card_json": '\{   "content": \{     "settings": \{       "default_sidebar_color": "\#0E72ED",       "is_split_sidebar": false     \}   \} \}'
                }
            ],
            "scheduled_time": "2020\-02\-10T21:39:50Z",
        },
    )
    adapter = TypeAdapter(models.PostChatUsersUserIdMessagesResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_send_201_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.message.send(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        data={
            "at_items": [
                {
                    "at_contact": "jchill@example\.com",
                    "at_type": 2,
                    "end_position": 8,
                    "start_position": 0,
                }
            ],
            "rich_text": [
                {
                    "start_position": 0,
                    "end_position": 1,
                    "format_type": "Paragraph",
                    "format_attr": "h1",
                }
            ],
            "message": "Hello",
            "file_ids": ["M87v\-bbmRGKCtl8nGNggvA"],
            "reply_main_message_id": "\{27ED2949\-6457\-417C\-83EA\-72515DAF00BD\}",
            "to_channel": "825c9e31f1064c73b394c5e4557d3447",
            "to_contact": "jchill@example\.com",
            "interactive_cards": [
                {
                    "card_json": '\{   "content": \{     "settings": \{       "default_sidebar_color": "\#0E72ED",       "is_split_sidebar": false     \}   \} \}'
                }
            ],
            "scheduled_time": "2020\-02\-10T21:39:50Z",
        },
    )
    adapter = TypeAdapter(models.PostChatUsersUserIdMessagesResponse)
    adapter.validate_python(response)


def test_mark_status_204_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.message.mark_status(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        data={
            "action": "read",
            "timestamp": 1581370790388,
            "to_channel": "825c9e31f1064c73b394c5e4557d3447",
            "to_contact": "jchill@example\.com",
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_mark_status_204_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.message.mark_status(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        data={
            "action": "read",
            "timestamp": 1581370790388,
            "to_channel": "825c9e31f1064c73b394c5e4557d3447",
            "to_contact": "jchill@example\.com",
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_react_204_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.message.react(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        data={
            "action": "remove",
            "emoji": "U\+1F600",
            "to_channel": "825c9e31f1064c73b394c5e4557d3447",
            "to_contact": "jchill@example\.com",
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_react_204_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.message.react(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        data={
            "action": "remove",
            "emoji": "U\+1F600",
            "to_channel": "825c9e31f1064c73b394c5e4557d3447",
            "to_contact": "jchill@example\.com",
        },
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


def test_get_thread_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.message.get_thread(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        from_query="2020\-05\-01T19:13:02Z",
        limit=30,
        need_attachment=True,
        need_emoji=False,
        need_main_message=True,
        sort="desc",
        to="2020\-05\-11T19:13:02Z",
        to_channel="0e3f7d76798f4991b11f8e1715887768",
        to_contact="example@example\.com",
    )
    adapter = TypeAdapter(models.GetChatUsersUserIdMessagesMessageIdThreadResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_get_thread_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.message.get_thread(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        from_query="2020\-05\-01T19:13:02Z",
        limit=30,
        need_attachment=True,
        need_emoji=False,
        need_main_message=True,
        sort="desc",
        to="2020\-05\-11T19:13:02Z",
        to_channel="0e3f7d76798f4991b11f8e1715887768",
        to_contact="example@example\.com",
    )
    adapter = TypeAdapter(models.GetChatUsersUserIdMessagesMessageIdThreadResponse)
    adapter.validate_python(response)


def test_get_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.message.get(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        download_file_formats="audio/mp4",
        to_channel="cd102f7602c6428db0a273e632eb020B",
        to_contact="5UhQMZkDQ1CuuKVl1N5JIw",
    )
    adapter = TypeAdapter(models.GetChatUsersUserIdMessagesMessageIdResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_get_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.message.get(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        download_file_formats="audio/mp4",
        to_channel="cd102f7602c6428db0a273e632eb020B",
        to_contact="5UhQMZkDQ1CuuKVl1N5JIw",
    )
    adapter = TypeAdapter(models.GetChatUsersUserIdMessagesMessageIdResponse)
    adapter.validate_python(response)


def test_list_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.message.list(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        date="2020\-03\-01",
        download_file_formats="audio/mp4",
        exclude_child_message=True,
        from_query="2020\-02\-10T21:39:50Z",
        include_deleted_and_edited_message=True,
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size=10,
        search_key="hello",
        search_type="message",
        to="2020\-02\-15T12:00:00Z",
        to_channel="qrstuvwxyz67890",
        to_contact="string",
    )
    adapter = TypeAdapter(models.GetChatUsersUserIdMessagesResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_list_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.message.list(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        date="2020\-03\-01",
        download_file_formats="audio/mp4",
        exclude_child_message=True,
        from_query="2020\-02\-10T21:39:50Z",
        include_deleted_and_edited_message=True,
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size=10,
        search_key="hello",
        search_type="message",
        to="2020\-02\-15T12:00:00Z",
        to_channel="qrstuvwxyz67890",
        to_contact="string",
    )
    adapter = TypeAdapter(models.GetChatUsersUserIdMessagesResponse)
    adapter.validate_python(response)


def test_delete_204_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.chat.user.message.delete(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        to_channel="825c9e31f1064c73b394c5e4557d3447",
        to_contact="jchill@example\.com",
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_delete_204_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.chat.user.message.delete(
        user_id="v4iyWT1LTfy8QvPG4GTvdg",
        message_id="8cfaf567\-bf5a\-4acc\-b4f2\-88b3d371aca5",
        to_channel="825c9e31f1064c73b394c5e4557d3447",
        to_contact="jchill@example\.com",
    )
    adapter = TypeAdapter(None)
    adapter.validate_python(response)
