"""File Generated by Sideko (sideko.dev)"""

import pytest
from zoom_team_chat import Client, AsyncClient
from os import getenv
from zoom_team_chat.types.report.chat.session import models
from pydantic import TypeAdapter

# test sync & async methods (keep comment for code generation)


def test_get_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.report.chat.session.get(
        session_id="5fdca6877b790503c027339a091e794498c146b849a1443d0c38d9ecd93b254d",
        from_query="2020\-03\-01",
        to="2020\-04\-01",
        include_bot_message=True,
        include_fields="edited_messages",
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size=30,
    )
    adapter = TypeAdapter(models.GetReportChatSessionsSessionIdResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_get_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.report.chat.session.get(
        session_id="5fdca6877b790503c027339a091e794498c146b849a1443d0c38d9ecd93b254d",
        from_query="2020\-03\-01",
        to="2020\-04\-01",
        include_bot_message=True,
        include_fields="edited_messages",
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size=30,
    )
    adapter = TypeAdapter(models.GetReportChatSessionsSessionIdResponse)
    adapter.validate_python(response)


def test_list_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(token=getenv("API_TOKEN"))
    response = client.report.chat.session.list(
        from_query="2020\-03\-01",
        to="2020\-04\-01",
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size=30,
    )
    adapter = TypeAdapter(models.GetReportChatSessionsResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_list_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(token=getenv("API_TOKEN"))
    response = await client.report.chat.session.list(
        from_query="2020\-03\-01",
        to="2020\-04\-01",
        next_page_token="R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42",
        page_size=30,
    )
    adapter = TypeAdapter(models.GetReportChatSessionsResponse)
    adapter.validate_python(response)
