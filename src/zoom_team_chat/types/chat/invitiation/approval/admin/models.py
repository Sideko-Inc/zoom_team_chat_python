"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class GetChatInvitationsApprovalsAdminResponseInvitationsItemInvitee(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    display_name: typing.Optional[str] = _PydanticField(
        alias="display_name", default=None
    )
    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    user_id: typing.Optional[str] = _PydanticField(alias="user_id", default=None)
    member_id: typing.Optional[str] = _PydanticField(alias="member_id", default=None)
    is_external_user: bool = _PydanticField(alias="is_external_user")
    account_name: typing.Optional[str] = _PydanticField(
        alias="account_name", default=None
    )


class GetChatInvitationsApprovalsAdminResponseInvitationsItemInvitersItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    display_name: str = _PydanticField(alias="display_name")
    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    user_id: typing.Optional[str] = _PydanticField(alias="user_id", default=None)
    member_id: str = _PydanticField(alias="member_id")
    is_external_user: bool = _PydanticField(alias="is_external_user")
    account_name: typing.Optional[str] = _PydanticField(
        alias="account_name", default=None
    )


class GetChatInvitationsApprovalsAdminResponseInvitationsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    invitation_id: str = _PydanticField(alias="invitation_id")
    invitation_direction: typing_extensions.Literal["sent", "received"] = (
        _PydanticField(alias="invitation_direction")
    )
    channel_name: str = _PydanticField(alias="channel_name")
    channel_owner_account_name: str = _PydanticField(alias="channel_owner_account_name")
    channel_type: int = _PydanticField(alias="channel_type")
    invitee: typing.Optional[
        GetChatInvitationsApprovalsAdminResponseInvitationsItemInvitee
    ] = _PydanticField(alias="invitee", default=None)
    inviters: typing.Optional[
        typing.List[GetChatInvitationsApprovalsAdminResponseInvitationsItemInvitersItem]
    ] = _PydanticField(alias="inviters", default=None)


class GetChatInvitationsApprovalsAdminResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    page_size: int = _PydanticField(alias="page_size")
    next_page_token: str = _PydanticField(alias="next_page_token")
    invitations: typing.List[
        GetChatInvitationsApprovalsAdminResponseInvitationsItem
    ] = _PydanticField(alias="invitations")
