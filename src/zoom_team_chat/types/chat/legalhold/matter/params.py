"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PatchChatLegalholdMattersMatterIdBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    matter_name: typing_extensions.Required[str]


class _SerializerPatchChatLegalholdMattersMatterIdBody(pydantic.BaseModel):
    """
    Serializer for PatchChatLegalholdMattersMatterIdBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    matter_name: str = pydantic.Field(alias="matter_name")


class PostChatLegalholdMattersBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    start_date: typing_extensions.NotRequired[str]
    end_date: typing_extensions.NotRequired[str]
    matter_name: typing_extensions.Required[str]
    identifiers: typing_extensions.Required[typing.List[str]]


class _SerializerPostChatLegalholdMattersBody(pydantic.BaseModel):
    """
    Serializer for PostChatLegalholdMattersBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    start_date: typing.Optional[str] = pydantic.Field(alias="start_date", default=None)
    end_date: typing.Optional[str] = pydantic.Field(alias="end_date", default=None)
    matter_name: str = pydantic.Field(alias="matter_name")
    identifiers: typing.List[str] = pydantic.Field(alias="identifiers")
