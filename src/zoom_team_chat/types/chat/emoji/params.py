"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostChatEmojiFilesBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    name: typing_extensions.Required[str]
    file: typing_extensions.Required[typing.Union[typing.BinaryIO, io.BufferedReader]]


class _SerializerPostChatEmojiFilesBody(pydantic.BaseModel):
    """
    Serializer for PostChatEmojiFilesBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    name: str = pydantic.Field(alias="name")

    @staticmethod
    def get_files_from_typed_dict(
        item: PostChatEmojiFilesBody,
    ) -> typing.List[HttpxFile]:
        files: typing.List[HttpxFile] = []

        file = item.get("file", None)
        if isinstance(file, list):
            files.extend([("file", f) for f in file])
        elif file is not None:
            files.append(("file", file))

        return files
