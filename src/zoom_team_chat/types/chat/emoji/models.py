"""File Generated by Sideko (sideko.dev)"""

import io
import typing

from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class GetChatEmojiResponseEmojisItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    file_id: str = _PydanticField(alias="file_id")
    name: str = _PydanticField(alias="name")
    image_url: str = _PydanticField(alias="image_url")
    user_id: str = _PydanticField(alias="user_id")
    member_id: str = _PydanticField(alias="member_id")
    user_name: str = _PydanticField(alias="user_name")
    user_email: str = _PydanticField(alias="user_email")
    date_added: str = _PydanticField(alias="date_added")


class PostChatEmojiFilesResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    file_id: str = _PydanticField(alias="file_id")
    name: str = _PydanticField(alias="name")


class GetChatEmojiResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    emojis: typing.List[GetChatEmojiResponseEmojisItem] = _PydanticField(alias="emojis")
    next_page_token: typing.Optional[str] = _PydanticField(
        alias="next_page_token", default=None
    )
    page_size: int = _PydanticField(alias="page_size")
    search_key: typing.Optional[str] = _PydanticField(alias="search_key", default=None)
