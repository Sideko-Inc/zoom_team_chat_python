"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PatchChatChannelsChannelIdRetentionBodyCloudRetention(
    typing_extensions.TypedDict
):
    """
    The cloud retention policy of the channel.
    """

    enable_custom_retention: typing_extensions.Required[bool]
    retention_period: typing_extensions.NotRequired[str]


class _SerializerPatchChatChannelsChannelIdRetentionBodyCloudRetention(
    pydantic.BaseModel
):
    """
    Serializer for PatchChatChannelsChannelIdRetentionBodyCloudRetention handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    enable_custom_retention: bool = pydantic.Field(alias="enable_custom_retention")
    retention_period: typing.Optional[str] = pydantic.Field(
        alias="retention_period", default=None
    )


class PatchChatChannelsChannelIdRetentionBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    cloud_retention: typing_extensions.Required[
        PatchChatChannelsChannelIdRetentionBodyCloudRetention
    ]


class _SerializerPatchChatChannelsChannelIdRetentionBody(pydantic.BaseModel):
    """
    Serializer for PatchChatChannelsChannelIdRetentionBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    cloud_retention: _SerializerPatchChatChannelsChannelIdRetentionBodyCloudRetention = pydantic.Field(
        alias="cloud_retention"
    )
