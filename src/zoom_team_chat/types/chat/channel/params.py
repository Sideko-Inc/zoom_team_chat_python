"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PatchChatChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj0(
    typing_extensions.TypedDict
):
    """
    The user ID object.
    """

    user_id: typing_extensions.NotRequired[str]


class _SerializerPatchChatChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj0(
    pydantic.BaseModel
):
    """
    Serializer for PatchChatChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj0 handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    user_id: typing.Optional[str] = pydantic.Field(alias="user_id", default=None)


class PatchChatChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj1(
    typing_extensions.TypedDict
):
    """
    The member ID object.
    """

    member_id: typing_extensions.NotRequired[str]


class _SerializerPatchChatChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj1(
    pydantic.BaseModel
):
    """
    Serializer for PatchChatChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj1 handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    member_id: typing.Optional[str] = pydantic.Field(alias="member_id", default=None)


class PostChatChannelsSearchBodyNeedleObj0(typing_extensions.TypedDict):
    """
    This field searches by channel name.
    """

    search_type: typing_extensions.Required[
        typing_extensions.Literal["by_channel_name"]
    ]
    keywords: typing_extensions.Required[typing.List[str]]


class _SerializerPostChatChannelsSearchBodyNeedleObj0(pydantic.BaseModel):
    """
    Serializer for PostChatChannelsSearchBodyNeedleObj0 handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    search_type: typing_extensions.Literal["by_channel_name"] = pydantic.Field(
        alias="search_type"
    )
    keywords: typing.List[str] = pydantic.Field(alias="keywords")


class PostChatChannelsSearchBodyNeedleObj1(typing_extensions.TypedDict):
    """
    This field searches by channel name for the exact match.
    """

    search_type: typing_extensions.Required[
        typing_extensions.Literal["by_channel_name_exact_match"]
    ]
    channel_name: typing_extensions.Required[str]


class _SerializerPostChatChannelsSearchBodyNeedleObj1(pydantic.BaseModel):
    """
    Serializer for PostChatChannelsSearchBodyNeedleObj1 handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    search_type: typing_extensions.Literal["by_channel_name_exact_match"] = (
        pydantic.Field(alias="search_type")
    )
    channel_name: str = pydantic.Field(alias="channel_name")


class PatchChatChannelsChannelIdBodyChannelSettings(typing_extensions.TypedDict):
    """
    The settings of the [chat channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-).
    """

    add_member_permissions: typing_extensions.NotRequired[int]
    new_members_can_see_previous_messages_files: typing_extensions.NotRequired[bool]
    posting_permissions: typing_extensions.NotRequired[int]
    mention_all_permissions: typing_extensions.NotRequired[int]
    designated_posting_members: typing_extensions.NotRequired[
        typing.List[
            typing.Union[
                PatchChatChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj0,
                PatchChatChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj1,
            ]
        ]
    ]


class _SerializerPatchChatChannelsChannelIdBodyChannelSettings(pydantic.BaseModel):
    """
    Serializer for PatchChatChannelsChannelIdBodyChannelSettings handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    add_member_permissions: typing.Optional[int] = pydantic.Field(
        alias="add_member_permissions", default=None
    )
    new_members_can_see_previous_messages_files: typing.Optional[bool] = pydantic.Field(
        alias="new_members_can_see_previous_messages_files", default=None
    )
    posting_permissions: typing.Optional[int] = pydantic.Field(
        alias="posting_permissions", default=None
    )
    mention_all_permissions: typing.Optional[int] = pydantic.Field(
        alias="mention_all_permissions", default=None
    )
    designated_posting_members: typing.Optional[
        typing.List[
            typing.Union[
                _SerializerPatchChatChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj0,
                _SerializerPatchChatChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj1,
            ]
        ]
    ] = pydantic.Field(alias="designated_posting_members", default=None)


class PostChatChannelsSearchBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    user_id: typing_extensions.NotRequired[str]
    page_size: typing_extensions.NotRequired[int]
    next_page_token: typing_extensions.NotRequired[str]
    needle: typing_extensions.Required[
        typing.Union[
            PostChatChannelsSearchBodyNeedleObj0, PostChatChannelsSearchBodyNeedleObj1
        ]
    ]
    haystack: typing_extensions.Required[
        typing_extensions.Literal["user_joined", "public", "all"]
    ]


class _SerializerPostChatChannelsSearchBody(pydantic.BaseModel):
    """
    Serializer for PostChatChannelsSearchBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    user_id: typing.Optional[str] = pydantic.Field(alias="user_id", default=None)
    page_size: typing.Optional[int] = pydantic.Field(alias="page_size", default=None)
    next_page_token: typing.Optional[str] = pydantic.Field(
        alias="next_page_token", default=None
    )
    needle: typing.Union[
        _SerializerPostChatChannelsSearchBodyNeedleObj0,
        _SerializerPostChatChannelsSearchBodyNeedleObj1,
    ] = pydantic.Field(alias="needle")
    haystack: typing_extensions.Literal["user_joined", "public", "all"] = (
        pydantic.Field(alias="haystack")
    )


class PatchChatChannelsChannelIdBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    name: typing_extensions.NotRequired[str]
    channel_settings: typing_extensions.NotRequired[
        PatchChatChannelsChannelIdBodyChannelSettings
    ]
    type: typing_extensions.NotRequired[int]


class _SerializerPatchChatChannelsChannelIdBody(pydantic.BaseModel):
    """
    Serializer for PatchChatChannelsChannelIdBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    channel_settings: typing.Optional[
        _SerializerPatchChatChannelsChannelIdBodyChannelSettings
    ] = pydantic.Field(alias="channel_settings", default=None)
    type: typing.Optional[int] = pydantic.Field(alias="type", default=None)
