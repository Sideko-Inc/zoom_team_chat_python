"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PatchChatUsersUserIdMessagesMessageIdEmojiReactionsBody(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    action: typing_extensions.NotRequired[typing_extensions.Literal["add", "remove"]]
    emoji: typing_extensions.NotRequired[str]
    to_channel: typing_extensions.NotRequired[str]
    to_contact: typing_extensions.NotRequired[typing.Union[str, str, str]]


class _SerializerPatchChatUsersUserIdMessagesMessageIdEmojiReactionsBody(
    pydantic.BaseModel
):
    """
    Serializer for PatchChatUsersUserIdMessagesMessageIdEmojiReactionsBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    action: typing.Optional[typing_extensions.Literal["add", "remove"]] = (
        pydantic.Field(alias="action", default=None)
    )
    emoji: typing.Optional[str] = pydantic.Field(alias="emoji", default=None)
    to_channel: typing.Optional[str] = pydantic.Field(alias="to_channel", default=None)
    to_contact: typing.Optional[typing.Union[str, str, str]] = pydantic.Field(
        alias="to_contact", default=None
    )


class PatchChatUsersUserIdMessagesMessageIdStatusBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    action: typing_extensions.NotRequired[typing_extensions.Literal["read", "unread"]]
    timestamp: typing_extensions.NotRequired[int]
    to_channel: typing_extensions.NotRequired[str]
    to_contact: typing_extensions.NotRequired[typing.Union[str, str, str]]


class _SerializerPatchChatUsersUserIdMessagesMessageIdStatusBody(pydantic.BaseModel):
    """
    Serializer for PatchChatUsersUserIdMessagesMessageIdStatusBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    action: typing.Optional[typing_extensions.Literal["read", "unread"]] = (
        pydantic.Field(alias="action", default=None)
    )
    timestamp: typing.Optional[int] = pydantic.Field(alias="timestamp", default=None)
    to_channel: typing.Optional[str] = pydantic.Field(alias="to_channel", default=None)
    to_contact: typing.Optional[typing.Union[str, str, str]] = pydantic.Field(
        alias="to_contact", default=None
    )


class PostChatUsersUserIdMessagesBodyAtItemsItem(typing_extensions.TypedDict):
    """
    No description specified
    """

    at_contact: typing_extensions.NotRequired[typing.Union[str, str]]
    at_type: typing_extensions.NotRequired[int]
    end_position: typing_extensions.NotRequired[int]
    start_position: typing_extensions.NotRequired[int]


class _SerializerPostChatUsersUserIdMessagesBodyAtItemsItem(pydantic.BaseModel):
    """
    Serializer for PostChatUsersUserIdMessagesBodyAtItemsItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    at_contact: typing.Optional[typing.Union[str, str]] = pydantic.Field(
        alias="at_contact", default=None
    )
    at_type: typing.Optional[int] = pydantic.Field(alias="at_type", default=None)
    end_position: typing.Optional[int] = pydantic.Field(
        alias="end_position", default=None
    )
    start_position: typing.Optional[int] = pydantic.Field(
        alias="start_position", default=None
    )


class PostChatUsersUserIdMessagesBodyRichTextItem(typing_extensions.TypedDict):
    """
    No description specified
    """

    start_position: typing_extensions.NotRequired[int]
    end_position: typing_extensions.NotRequired[int]
    format_type: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "Bold",
            "Italic",
            "Strikethrough",
            "BulletedList",
            "NumberedList",
            "Underline",
            "FontSize",
            "FontColor",
            "BackgroundColor",
            "LeftIndent",
            "Paragraph",
            "Quote",
            "AddLink",
        ]
    ]
    format_attr: typing_extensions.NotRequired[str]


class _SerializerPostChatUsersUserIdMessagesBodyRichTextItem(pydantic.BaseModel):
    """
    Serializer for PostChatUsersUserIdMessagesBodyRichTextItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    start_position: typing.Optional[int] = pydantic.Field(
        alias="start_position", default=None
    )
    end_position: typing.Optional[int] = pydantic.Field(
        alias="end_position", default=None
    )
    format_type: typing.Optional[
        typing_extensions.Literal[
            "Bold",
            "Italic",
            "Strikethrough",
            "BulletedList",
            "NumberedList",
            "Underline",
            "FontSize",
            "FontColor",
            "BackgroundColor",
            "LeftIndent",
            "Paragraph",
            "Quote",
            "AddLink",
        ]
    ] = pydantic.Field(alias="format_type", default=None)
    format_attr: typing.Optional[str] = pydantic.Field(
        alias="format_attr", default=None
    )


class PostChatUsersUserIdMessagesBodyInteractiveCardsItem(typing_extensions.TypedDict):
    """
    No description specified
    """

    card_json: typing_extensions.NotRequired[str]


class _SerializerPostChatUsersUserIdMessagesBodyInteractiveCardsItem(
    pydantic.BaseModel
):
    """
    Serializer for PostChatUsersUserIdMessagesBodyInteractiveCardsItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    card_json: typing.Optional[str] = pydantic.Field(alias="card_json", default=None)


class PutChatUsersUserIdMessagesMessageIdBodyInteractiveCardsItemObj0(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    card_id: typing_extensions.NotRequired[str]


class _SerializerPutChatUsersUserIdMessagesMessageIdBodyInteractiveCardsItemObj0(
    pydantic.BaseModel
):
    """
    Serializer for PutChatUsersUserIdMessagesMessageIdBodyInteractiveCardsItemObj0 handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    card_id: typing.Optional[str] = pydantic.Field(alias="card_id", default=None)


class PutChatUsersUserIdMessagesMessageIdBodyInteractiveCardsItemObj1(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    card_json: typing_extensions.NotRequired[str]


class _SerializerPutChatUsersUserIdMessagesMessageIdBodyInteractiveCardsItemObj1(
    pydantic.BaseModel
):
    """
    Serializer for PutChatUsersUserIdMessagesMessageIdBodyInteractiveCardsItemObj1 handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    card_json: typing.Optional[str] = pydantic.Field(alias="card_json", default=None)


class PostChatUsersUserIdMessagesBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    at_items: typing_extensions.NotRequired[
        typing.List[PostChatUsersUserIdMessagesBodyAtItemsItem]
    ]
    rich_text: typing_extensions.NotRequired[
        typing.List[PostChatUsersUserIdMessagesBodyRichTextItem]
    ]
    message: typing_extensions.Required[str]
    file_ids: typing_extensions.NotRequired[typing.List[str]]
    reply_main_message_id: typing_extensions.NotRequired[str]
    to_channel: typing_extensions.NotRequired[str]
    to_contact: typing_extensions.NotRequired[typing.Union[str, str, str]]
    interactive_cards: typing_extensions.NotRequired[
        typing.List[PostChatUsersUserIdMessagesBodyInteractiveCardsItem]
    ]
    scheduled_time: typing_extensions.NotRequired[str]


class _SerializerPostChatUsersUserIdMessagesBody(pydantic.BaseModel):
    """
    Serializer for PostChatUsersUserIdMessagesBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    at_items: typing.Optional[
        typing.List[_SerializerPostChatUsersUserIdMessagesBodyAtItemsItem]
    ] = pydantic.Field(alias="at_items", default=None)
    rich_text: typing.Optional[
        typing.List[_SerializerPostChatUsersUserIdMessagesBodyRichTextItem]
    ] = pydantic.Field(alias="rich_text", default=None)
    message: str = pydantic.Field(alias="message")
    file_ids: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="file_ids", default=None
    )
    reply_main_message_id: typing.Optional[str] = pydantic.Field(
        alias="reply_main_message_id", default=None
    )
    to_channel: typing.Optional[str] = pydantic.Field(alias="to_channel", default=None)
    to_contact: typing.Optional[typing.Union[str, str, str]] = pydantic.Field(
        alias="to_contact", default=None
    )
    interactive_cards: typing.Optional[
        typing.List[_SerializerPostChatUsersUserIdMessagesBodyInteractiveCardsItem]
    ] = pydantic.Field(alias="interactive_cards", default=None)
    scheduled_time: typing.Optional[str] = pydantic.Field(
        alias="scheduled_time", default=None
    )


class PutChatUsersUserIdMessagesMessageIdBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    message: typing_extensions.NotRequired[str]
    to_channel: typing_extensions.NotRequired[str]
    to_contact: typing_extensions.NotRequired[typing.Union[str, str, str]]
    file_ids: typing_extensions.NotRequired[typing.List[str]]
    interactive_cards: typing_extensions.NotRequired[
        typing.List[
            typing.Union[
                PutChatUsersUserIdMessagesMessageIdBodyInteractiveCardsItemObj0,
                PutChatUsersUserIdMessagesMessageIdBodyInteractiveCardsItemObj1,
            ]
        ]
    ]


class _SerializerPutChatUsersUserIdMessagesMessageIdBody(pydantic.BaseModel):
    """
    Serializer for PutChatUsersUserIdMessagesMessageIdBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    to_channel: typing.Optional[str] = pydantic.Field(alias="to_channel", default=None)
    to_contact: typing.Optional[typing.Union[str, str, str]] = pydantic.Field(
        alias="to_contact", default=None
    )
    file_ids: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="file_ids", default=None
    )
    interactive_cards: typing.Optional[
        typing.List[
            typing.Union[
                _SerializerPutChatUsersUserIdMessagesMessageIdBodyInteractiveCardsItemObj0,
                _SerializerPutChatUsersUserIdMessagesMessageIdBodyInteractiveCardsItemObj1,
            ]
        ]
    ] = pydantic.Field(alias="interactive_cards", default=None)
