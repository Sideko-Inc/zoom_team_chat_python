"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostChatUsersUserIdChannelsChannelIdAdminsBodyAdminsItemObj0(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    email: typing_extensions.Required[str]


class _SerializerPostChatUsersUserIdChannelsChannelIdAdminsBodyAdminsItemObj0(
    pydantic.BaseModel
):
    """
    Serializer for PostChatUsersUserIdChannelsChannelIdAdminsBodyAdminsItemObj0 handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    email: str = pydantic.Field(alias="email")


class PostChatUsersUserIdChannelsChannelIdAdminsBodyAdminsItemObj1(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    member_id: typing_extensions.Required[str]


class _SerializerPostChatUsersUserIdChannelsChannelIdAdminsBodyAdminsItemObj1(
    pydantic.BaseModel
):
    """
    Serializer for PostChatUsersUserIdChannelsChannelIdAdminsBodyAdminsItemObj1 handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    member_id: str = pydantic.Field(alias="member_id")


class PostChatUsersUserIdChannelsChannelIdAdminsBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    admins: typing_extensions.NotRequired[
        typing.List[
            typing.Union[
                PostChatUsersUserIdChannelsChannelIdAdminsBodyAdminsItemObj0,
                PostChatUsersUserIdChannelsChannelIdAdminsBodyAdminsItemObj1,
            ]
        ]
    ]


class _SerializerPostChatUsersUserIdChannelsChannelIdAdminsBody(pydantic.BaseModel):
    """
    Serializer for PostChatUsersUserIdChannelsChannelIdAdminsBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    admins: typing.Optional[
        typing.List[
            typing.Union[
                _SerializerPostChatUsersUserIdChannelsChannelIdAdminsBodyAdminsItemObj0,
                _SerializerPostChatUsersUserIdChannelsChannelIdAdminsBodyAdminsItemObj1,
            ]
        ]
    ] = pydantic.Field(alias="admins", default=None)
