"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PatchChatUsersUserIdChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj0(
    typing_extensions.TypedDict
):
    """
    The user ID object.
    """

    user_id: typing_extensions.NotRequired[str]


class _SerializerPatchChatUsersUserIdChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj0(
    pydantic.BaseModel
):
    """
    Serializer for PatchChatUsersUserIdChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj0 handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    user_id: typing.Optional[str] = pydantic.Field(alias="user_id", default=None)


class PatchChatUsersUserIdChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj1(
    typing_extensions.TypedDict
):
    """
    The member ID object.
    """

    member_id: typing_extensions.NotRequired[str]


class _SerializerPatchChatUsersUserIdChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj1(
    pydantic.BaseModel
):
    """
    Serializer for PatchChatUsersUserIdChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj1 handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    member_id: typing.Optional[str] = pydantic.Field(alias="member_id", default=None)


class PostChatUsersUserIdChannelsBodyChannelSettings(typing_extensions.TypedDict):
    """
    The settings of the [chat channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-).
    """

    add_member_permissions: typing_extensions.NotRequired[int]
    new_members_can_see_previous_messages_files: typing_extensions.NotRequired[bool]
    posting_permissions: typing_extensions.NotRequired[int]
    mention_all_permissions: typing_extensions.NotRequired[int]


class _SerializerPostChatUsersUserIdChannelsBodyChannelSettings(pydantic.BaseModel):
    """
    Serializer for PostChatUsersUserIdChannelsBodyChannelSettings handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    add_member_permissions: typing.Optional[int] = pydantic.Field(
        alias="add_member_permissions", default=None
    )
    new_members_can_see_previous_messages_files: typing.Optional[bool] = pydantic.Field(
        alias="new_members_can_see_previous_messages_files", default=None
    )
    posting_permissions: typing.Optional[int] = pydantic.Field(
        alias="posting_permissions", default=None
    )
    mention_all_permissions: typing.Optional[int] = pydantic.Field(
        alias="mention_all_permissions", default=None
    )


class PostChatUsersUserIdChannelsBodyMembersItem(typing_extensions.TypedDict):
    """
    No description specified
    """

    email: typing_extensions.Required[str]


class _SerializerPostChatUsersUserIdChannelsBodyMembersItem(pydantic.BaseModel):
    """
    Serializer for PostChatUsersUserIdChannelsBodyMembersItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    email: str = pydantic.Field(alias="email")


class PatchChatUsersUserIdChannelsChannelIdBodyChannelSettings(
    typing_extensions.TypedDict
):
    """
    The settings of the [chat channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-).
    """

    add_member_permissions: typing_extensions.NotRequired[int]
    new_members_can_see_previous_messages_files: typing_extensions.NotRequired[bool]
    posting_permissions: typing_extensions.NotRequired[int]
    mention_all_permissions: typing_extensions.NotRequired[int]
    designated_posting_members: typing_extensions.NotRequired[
        typing.List[
            typing.Union[
                PatchChatUsersUserIdChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj0,
                PatchChatUsersUserIdChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj1,
            ]
        ]
    ]


class _SerializerPatchChatUsersUserIdChannelsChannelIdBodyChannelSettings(
    pydantic.BaseModel
):
    """
    Serializer for PatchChatUsersUserIdChannelsChannelIdBodyChannelSettings handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    add_member_permissions: typing.Optional[int] = pydantic.Field(
        alias="add_member_permissions", default=None
    )
    new_members_can_see_previous_messages_files: typing.Optional[bool] = pydantic.Field(
        alias="new_members_can_see_previous_messages_files", default=None
    )
    posting_permissions: typing.Optional[int] = pydantic.Field(
        alias="posting_permissions", default=None
    )
    mention_all_permissions: typing.Optional[int] = pydantic.Field(
        alias="mention_all_permissions", default=None
    )
    designated_posting_members: typing.Optional[
        typing.List[
            typing.Union[
                _SerializerPatchChatUsersUserIdChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj0,
                _SerializerPatchChatUsersUserIdChannelsChannelIdBodyChannelSettingsDesignatedPostingMembersItemObj1,
            ]
        ]
    ] = pydantic.Field(alias="designated_posting_members", default=None)


class PostChatUsersUserIdChannelsBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    channel_settings: typing_extensions.NotRequired[
        PostChatUsersUserIdChannelsBodyChannelSettings
    ]
    members: typing_extensions.NotRequired[
        typing.List[PostChatUsersUserIdChannelsBodyMembersItem]
    ]
    name: typing_extensions.NotRequired[str]
    type: typing_extensions.NotRequired[int]


class _SerializerPostChatUsersUserIdChannelsBody(pydantic.BaseModel):
    """
    Serializer for PostChatUsersUserIdChannelsBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    channel_settings: typing.Optional[
        _SerializerPostChatUsersUserIdChannelsBodyChannelSettings
    ] = pydantic.Field(alias="channel_settings", default=None)
    members: typing.Optional[
        typing.List[_SerializerPostChatUsersUserIdChannelsBodyMembersItem]
    ] = pydantic.Field(alias="members", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    type: typing.Optional[int] = pydantic.Field(alias="type", default=None)


class PatchChatUsersUserIdChannelsChannelIdBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    name: typing_extensions.NotRequired[str]
    channel_settings: typing_extensions.NotRequired[
        PatchChatUsersUserIdChannelsChannelIdBodyChannelSettings
    ]
    type: typing_extensions.NotRequired[int]


class _SerializerPatchChatUsersUserIdChannelsChannelIdBody(pydantic.BaseModel):
    """
    Serializer for PatchChatUsersUserIdChannelsChannelIdBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    channel_settings: typing.Optional[
        _SerializerPatchChatUsersUserIdChannelsChannelIdBodyChannelSettings
    ] = pydantic.Field(alias="channel_settings", default=None)
    type: typing.Optional[int] = pydantic.Field(alias="type", default=None)
