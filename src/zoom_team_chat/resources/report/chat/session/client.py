"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import AsyncClientWrapper, SyncClientWrapper
import typing
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
from zoom_team_chat.types.report.chat.session import models
from zoom_team_chat.utils.query_params import QueryParamTypes, encode_query_param
import typing_extensions


class SessionClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def get(
        self,
        *,
        session_id: str,
        from_query: str,
        to: str,
        include_bot_message: typing.Optional[bool] = None,
        include_fields: typing.Optional[
            typing_extensions.Literal[
                "edited_messages",
                "deleted_messages",
                "edited_messages,deleted_messages",
            ]
        ] = None,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetReportChatSessionsSessionIdResponse:
        """
        Gets Zoom Chat message reports for a specified period of time. The monthly date range must be within the last six months.

        **Prerequisites:**
        * A Pro or higher plan
        * Report chat permissions

        **Scopes:** `report_chat:read:admin`,`imchat:read:admin`

        **Granular Scopes:** `report:read:chat_session:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["from"] = encode_query_param(from_query, False)
        _query["to"] = encode_query_param(to, False)
        if include_bot_message is not None:
            _query["include_bot_message"] = encode_query_param(
                include_bot_message, False
            )
        if include_fields is not None:
            _query["include_fields"] = encode_query_param(include_fields, False)
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path=f"/report/chat/sessions/{session_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetReportChatSessionsSessionIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        from_query: str,
        to: str,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetReportChatSessionsResponse:
        """
        Gets Zoom Chat session reports for a specified period of time. The monthly date range **must** be within the last six months.

        **Prerequisites:**
        * A Pro or higher plan
        * Report chat permissions.

        **Scopes:** `report_chat:read:admin`,`imchat:read:admin`

        **Granular Scopes:** `report:read:list_chat_sessions:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["from"] = encode_query_param(from_query, False)
        _query["to"] = encode_query_param(to, False)
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path="/report/chat/sessions",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetReportChatSessionsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncSessionClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def get(
        self,
        *,
        session_id: str,
        from_query: str,
        to: str,
        include_bot_message: typing.Optional[bool] = None,
        include_fields: typing.Optional[
            typing_extensions.Literal[
                "edited_messages",
                "deleted_messages",
                "edited_messages,deleted_messages",
            ]
        ] = None,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetReportChatSessionsSessionIdResponse:
        """
        Gets Zoom Chat message reports for a specified period of time. The monthly date range must be within the last six months.

        **Prerequisites:**
        * A Pro or higher plan
        * Report chat permissions

        **Scopes:** `report_chat:read:admin`,`imchat:read:admin`

        **Granular Scopes:** `report:read:chat_session:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["from"] = encode_query_param(from_query, False)
        _query["to"] = encode_query_param(to, False)
        if include_bot_message is not None:
            _query["include_bot_message"] = encode_query_param(
                include_bot_message, False
            )
        if include_fields is not None:
            _query["include_fields"] = encode_query_param(include_fields, False)
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path=f"/report/chat/sessions/{session_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetReportChatSessionsSessionIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        from_query: str,
        to: str,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetReportChatSessionsResponse:
        """
        Gets Zoom Chat session reports for a specified period of time. The monthly date range **must** be within the last six months.

        **Prerequisites:**
        * A Pro or higher plan
        * Report chat permissions.

        **Scopes:** `report_chat:read:admin`,`imchat:read:admin`

        **Granular Scopes:** `report:read:list_chat_sessions:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["from"] = encode_query_param(from_query, False)
        _query["to"] = encode_query_param(to, False)
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path="/report/chat/sessions",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetReportChatSessionsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
