"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import AsyncClientWrapper, SyncClientWrapper
import typing
import typing_extensions
from zoom_team_chat.utils.request_options import default_request_options, RequestOptions
from zoom_team_chat.types.contact import models
from zoom_team_chat.utils.query_params import encode_query_param, QueryParamTypes


class ContactClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def search(
        self,
        *,
        search_key: str,
        contact_types: typing.Optional[int] = None,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        query_presence_status: typing.Optional[bool] = None,
        user_status: typing.Optional[
            typing_extensions.Literal["active", "inactive"]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetContactsResponse:
        """
        A user under an organization's Zoom account has internal users listed under Company Contacts in the Zoom Client. Use this API to search users that are in the company contacts of a Zoom account. Using the `search_key` query parameter, provide either first name, last name or the email address of the user that you would like to search for. Optionally, set `query_presence_status` to `true` in order to include the presence status of a contact.





        **Scopes:** `contact:read:admin`,`contact:read`

        **Granular Scopes:** `contact:read:list_contacts`,`contact:read:list_contacts:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["search_key"] = encode_query_param(search_key, False)
        if contact_types is not None:
            _query["contact_types"] = encode_query_param(contact_types, False)
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        if query_presence_status is not None:
            _query["query_presence_status"] = encode_query_param(
                query_presence_status, False
            )
        if user_status is not None:
            _query["user_status"] = encode_query_param(user_status, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path="/contacts",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetContactsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncContactClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def search(
        self,
        *,
        search_key: str,
        contact_types: typing.Optional[int] = None,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        query_presence_status: typing.Optional[bool] = None,
        user_status: typing.Optional[
            typing_extensions.Literal["active", "inactive"]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetContactsResponse:
        """
        A user under an organization's Zoom account has internal users listed under Company Contacts in the Zoom Client. Use this API to search users that are in the company contacts of a Zoom account. Using the `search_key` query parameter, provide either first name, last name or the email address of the user that you would like to search for. Optionally, set `query_presence_status` to `true` in order to include the presence status of a contact.





        **Scopes:** `contact:read:admin`,`contact:read`

        **Granular Scopes:** `contact:read:list_contacts`,`contact:read:list_contacts:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["search_key"] = encode_query_param(search_key, False)
        if contact_types is not None:
            _query["contact_types"] = encode_query_param(contact_types, False)
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        if query_presence_status is not None:
            _query["query_presence_status"] = encode_query_param(
                query_presence_status, False
            )
        if user_status is not None:
            _query["user_status"] = encode_query_param(user_status, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path="/contacts",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetContactsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
