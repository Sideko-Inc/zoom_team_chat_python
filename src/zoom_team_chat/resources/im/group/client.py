"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
from zoom_team_chat.resources.im.group.member import AsyncMemberClient, MemberClient
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
import typing
from zoom_team_chat.types.im.group import params
from zoom_team_chat.utils.request_body import to_encodable


class GroupClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)
        self.member = MemberClient(client_wrapper=self._client_wrapper)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: typing.Optional[params.PostImGroupsBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Create an IM directory group under your account.




        **Scopes:** `imgroup:write:admin`

        **Granular Scopes:** `contact_group:write:group:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerPostImGroupsBody)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path="/im/groups",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def update(
        self,
        *,
        data: typing.Optional[params.PatchImGroupsGroupIdBody] = None,
        group_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.




        **Scopes:** `imgroup:write:admin`

        **Granular Scopes:** `contact_group:update:group:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPatchImGroupsGroupIdBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="PATCH",
            path=f"/im/groups/{group_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self, *, group_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Retrieve an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.


        Scopes: `imgroup:read:admin`




        **Scopes:** `imgroup:read:admin`,`imgroup:write:admin`

        **Granular Scopes:** `contact_group:read:group:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path=f"/im/groups/{group_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=typing.Any,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Any]:
        """
        List [IM directory groups](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management).




        **Scopes:** `imgroup:read:admin`,`imgroup:write:admin`

        **Granular Scopes:** `contact_group:read:list_groups:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path="/im/groups",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=typing.Dict[str, typing.Any],
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, group_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.


        Scopes: `imgroup:write:admin`




        **Scopes:** `imgroup:write:admin`

        **Granular Scopes:** `contact_group:delete:group:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/im/groups/{group_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncGroupClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)
        self.member = AsyncMemberClient(client_wrapper=self._client_wrapper)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: typing.Optional[params.PostImGroupsBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Create an IM directory group under your account.




        **Scopes:** `imgroup:write:admin`

        **Granular Scopes:** `contact_group:write:group:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerPostImGroupsBody)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path="/im/groups",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def update(
        self,
        *,
        data: typing.Optional[params.PatchImGroupsGroupIdBody] = None,
        group_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.




        **Scopes:** `imgroup:write:admin`

        **Granular Scopes:** `contact_group:update:group:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPatchImGroupsGroupIdBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="PATCH",
            path=f"/im/groups/{group_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self, *, group_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Retrieve an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.


        Scopes: `imgroup:read:admin`




        **Scopes:** `imgroup:read:admin`,`imgroup:write:admin`

        **Granular Scopes:** `contact_group:read:group:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path=f"/im/groups/{group_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=typing.Any,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Any]:
        """
        List [IM directory groups](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management).




        **Scopes:** `imgroup:read:admin`,`imgroup:write:admin`

        **Granular Scopes:** `contact_group:read:list_groups:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path="/im/groups",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=typing.Dict[str, typing.Any],
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, group_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.


        Scopes: `imgroup:write:admin`




        **Scopes:** `imgroup:write:admin`

        **Granular Scopes:** `contact_group:delete:group:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/im/groups/{group_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
