"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
from zoom_team_chat.types.im.user.me.chat.message import params, models
import typing
from zoom_team_chat.utils.request_options import default_request_options, RequestOptions
from zoom_team_chat.utils.query_params import encode_query_param, QueryParamTypes
from zoom_team_chat.utils.request_body import to_encodable


class MessageClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def send(
        self,
        *,
        data: typing.Optional[params.PostImUsersMeChatMessagesBody] = None,
        chat_user: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostImUsersMeChatMessagesResponse:
        """
        Sends the chat message to a user.

        **Note:** This API only supports OAuth 2.0.


        **Scopes:** `imchat:write`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if chat_user is not None:
            _query["chat_user"] = encode_query_param(chat_user, False)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostImUsersMeChatMessagesBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path="/im/users/me/chat/messages",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            json=_json,
            cast_to=models.PostImUsersMeChatMessagesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncMessageClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def send(
        self,
        *,
        data: typing.Optional[params.PostImUsersMeChatMessagesBody] = None,
        chat_user: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostImUsersMeChatMessagesResponse:
        """
        Sends the chat message to a user.

        **Note:** This API only supports OAuth 2.0.


        **Scopes:** `imchat:write`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if chat_user is not None:
            _query["chat_user"] = encode_query_param(chat_user, False)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostImUsersMeChatMessagesBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path="/im/users/me/chat/messages",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            json=_json,
            cast_to=models.PostImUsersMeChatMessagesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
