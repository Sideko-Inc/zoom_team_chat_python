"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
import typing_extensions
import typing
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
from zoom_team_chat.types.chat.invitiation.approval.admin import models, params
from zoom_team_chat.utils.query_params import encode_query_param, QueryParamTypes
from zoom_team_chat.utils.request_body import to_encodable


class AdminClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def respond(
        self,
        *,
        data: typing.Optional[params.PatchChatInvitationsApprovalsAdminBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Approves or denies pending external invitations. (Only administrators can perform this task.)

        **Scopes:** `chat_channel:write:admin`

        **Granular Scopes:** `team_chat:update:invitations:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerPatchChatInvitationsApprovalsAdminBody,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="PATCH",
            path="/chat/invitations/approvals/admin",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        invitation_direction: typing_extensions.Literal["sent", "received"],
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatInvitationsApprovalsAdminResponse:
        """
        Retrieves a list of pending external invitations. (Account level app only.)

        Zoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate through chat in private or public groups.

        **Scopes:** `chat_channel:write:admin`,`chat_channel:read:admin`

        **Granular Scopes:** `team_chat:read:list_invitations:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["invitation_direction"] = encode_query_param(invitation_direction, False)
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path="/chat/invitations/approvals/admin",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatInvitationsApprovalsAdminResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAdminClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def respond(
        self,
        *,
        data: typing.Optional[params.PatchChatInvitationsApprovalsAdminBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Approves or denies pending external invitations. (Only administrators can perform this task.)

        **Scopes:** `chat_channel:write:admin`

        **Granular Scopes:** `team_chat:update:invitations:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerPatchChatInvitationsApprovalsAdminBody,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="PATCH",
            path="/chat/invitations/approvals/admin",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        invitation_direction: typing_extensions.Literal["sent", "received"],
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatInvitationsApprovalsAdminResponse:
        """
        Retrieves a list of pending external invitations. (Account level app only.)

        Zoom chat [channels](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) allow users to communicate through chat in private or public groups.

        **Scopes:** `chat_channel:write:admin`,`chat_channel:read:admin`

        **Granular Scopes:** `team_chat:read:list_invitations:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["invitation_direction"] = encode_query_param(invitation_direction, False)
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path="/chat/invitations/approvals/admin",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatInvitationsApprovalsAdminResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
