"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
from zoom_team_chat.resources.chat.invitiation.approval import (
    ApprovalClient,
    AsyncApprovalClient,
)
import typing
from zoom_team_chat.utils.request_options import default_request_options, RequestOptions
from zoom_team_chat.types.chat.invitiation import params, models
from zoom_team_chat.utils.query_params import encode_query_param, QueryParamTypes
from zoom_team_chat.utils.request_body import to_encodable


class InvitiationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)
        self.approval = ApprovalClient(client_wrapper=self._client_wrapper)

    # register sync api methods (keep comment for code generation)
    def join(
        self,
        *,
        data: typing.Optional[params.PostChatInvitationsJoinBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatInvitationsJoinResponse:
        """
        Opens a channel's invite link.

        **Scopes:** `chat_channel:write`

        **Granular Scopes:** `team_chat:write:open_invite_link`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatInvitationsJoinBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path="/chat/invitations/join",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatInvitationsJoinResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def update_invite_link(
        self,
        *,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Generates or resets an invite link for a channel.

        **Scopes:** `chat_channel:write`

        **Granular Scopes:** `team_chat:update:invite_link`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["channel_id"] = encode_query_param(channel_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="PATCH",
            path="/chat/invitations/invite_link",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def respond(
        self,
        *,
        data: typing.Optional[params.PatchChatInvitationsBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Accept or reject an invitation to join a channel.

        **Scopes:** `chat_channel:write`

        **Granular Scopes:** `team_chat:update:invitation`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPatchChatInvitationsBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="PATCH",
            path="/chat/invitations",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get_invite_link(
        self,
        *,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatInvitationsInviteLinkResponse:
        """
        Returns the invite link for a channel.

        **Scopes:** `chat_channel:read`,`chat_channel:write`

        **Granular Scopes:** `team_chat:read:invite_link`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["channel_id"] = encode_query_param(channel_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path="/chat/invitations/invite_link",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatInvitationsInviteLinkResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatInvitationsResponse:
        """
        Generates a list of a user's pending invitations.

        **Scopes:** `chat_channel:read`,`chat_channel:write`

        **Granular Scopes:** `team_chat:read:list_invitations`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path="/chat/invitations",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatInvitationsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncInvitiationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)
        self.approval = AsyncApprovalClient(client_wrapper=self._client_wrapper)

    # register async api methods (keep comment for code generation)
    async def join(
        self,
        *,
        data: typing.Optional[params.PostChatInvitationsJoinBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatInvitationsJoinResponse:
        """
        Opens a channel's invite link.

        **Scopes:** `chat_channel:write`

        **Granular Scopes:** `team_chat:write:open_invite_link`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatInvitationsJoinBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path="/chat/invitations/join",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatInvitationsJoinResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def update_invite_link(
        self,
        *,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Generates or resets an invite link for a channel.

        **Scopes:** `chat_channel:write`

        **Granular Scopes:** `team_chat:update:invite_link`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["channel_id"] = encode_query_param(channel_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="PATCH",
            path="/chat/invitations/invite_link",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def respond(
        self,
        *,
        data: typing.Optional[params.PatchChatInvitationsBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Accept or reject an invitation to join a channel.

        **Scopes:** `chat_channel:write`

        **Granular Scopes:** `team_chat:update:invitation`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPatchChatInvitationsBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="PATCH",
            path="/chat/invitations",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get_invite_link(
        self,
        *,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatInvitationsInviteLinkResponse:
        """
        Returns the invite link for a channel.

        **Scopes:** `chat_channel:read`,`chat_channel:write`

        **Granular Scopes:** `team_chat:read:invite_link`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["channel_id"] = encode_query_param(channel_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path="/chat/invitations/invite_link",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatInvitationsInviteLinkResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatInvitationsResponse:
        """
        Generates a list of a user's pending invitations.

        **Scopes:** `chat_channel:read`,`chat_channel:write`

        **Granular Scopes:** `team_chat:read:list_invitations`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path="/chat/invitations",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatInvitationsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
