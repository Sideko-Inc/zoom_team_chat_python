"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
import typing
from zoom_team_chat.types.chat.emoji import models, params
from zoom_team_chat.utils.query_params import encode_query_param, QueryParamTypes
from zoom_team_chat.utils.request_body import to_encodable


class EmojiClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: typing.Optional[params.PostChatEmojiFilesBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatEmojiFilesResponse:
        """
        Add a custom emoji.

         **Note:**
        * The base URL for this API's is `https://fileapi.zoom.us/v2`.
        * The rate limit of this API is 20 requests per second per API or 2000 requests per second per IP address.
        * The caller must support HTTP 30x redirects.
        * All files are sent as common files except `png`,`jpg`,`jpeg` and `gif`
        * The caller must retain the authorization header when redirected to a different hostname.


        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:write:custom_emoji`,`team_chat:write:custom_emoji:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        _data = to_encodable(
            item=data, dump_with=params._SerializerPostChatEmojiFilesBody
        )
        _files = params._SerializerPostChatEmojiFilesBody.get_files_from_typed_dict(
            data
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path="/chat/emoji/files",
            auth_names=["openapi_authorization", "openapi_oauth"],
            data=_data,
            files=_files,
            cast_to=models.PostChatEmojiFilesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        search_key: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatEmojiResponse:
        """
        Queries the custom emojis list.

        **Scopes:** `chat:read:admin`,`chat:read`,`chat:write:admin`,`chat:write`

        **Granular Scopes:** `team_chat:read:list_custom_emojis`,`team_chat:read:list_custom_emojis:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        if search_key is not None:
            _query["search_key"] = encode_query_param(search_key, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path="/chat/emoji",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatEmojiResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, file_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a custom emoji by *fileId*.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:delete:custom_emoji`,`team_chat:delete:custom_emoji:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/emoji/{file_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncEmojiClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: typing.Optional[params.PostChatEmojiFilesBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatEmojiFilesResponse:
        """
        Add a custom emoji.

         **Note:**
        * The base URL for this API's is `https://fileapi.zoom.us/v2`.
        * The rate limit of this API is 20 requests per second per API or 2000 requests per second per IP address.
        * The caller must support HTTP 30x redirects.
        * All files are sent as common files except `png`,`jpg`,`jpeg` and `gif`
        * The caller must retain the authorization header when redirected to a different hostname.


        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:write:custom_emoji`,`team_chat:write:custom_emoji:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        _data = to_encodable(
            item=data, dump_with=params._SerializerPostChatEmojiFilesBody
        )
        _files = params._SerializerPostChatEmojiFilesBody.get_files_from_typed_dict(
            data
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path="/chat/emoji/files",
            auth_names=["openapi_authorization", "openapi_oauth"],
            data=_data,
            files=_files,
            cast_to=models.PostChatEmojiFilesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        search_key: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatEmojiResponse:
        """
        Queries the custom emojis list.

        **Scopes:** `chat:read:admin`,`chat:read`,`chat:write:admin`,`chat:write`

        **Granular Scopes:** `team_chat:read:list_custom_emojis`,`team_chat:read:list_custom_emojis:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        if search_key is not None:
            _query["search_key"] = encode_query_param(search_key, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path="/chat/emoji",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatEmojiResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, file_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a custom emoji by *fileId*.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:delete:custom_emoji`,`team_chat:delete:custom_emoji:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/emoji/{file_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
