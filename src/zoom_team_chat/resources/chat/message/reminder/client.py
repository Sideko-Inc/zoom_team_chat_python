"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import AsyncClientWrapper, SyncClientWrapper
import typing
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
from zoom_team_chat.utils.query_params import encode_query_param, QueryParamTypes
from zoom_team_chat.types.chat.message.reminder import params
from zoom_team_chat.utils.request_body import to_encodable


class ReminderClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: typing.Optional[params.PostChatMessagesMessageIdReminderBody] = None,
        message_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Creates a reminder for a person or a chat channel.

        You must provide one of the following query parameters:
        `to_contact` — The email address of the Zoom contact to whom you want to set the reminder.
        `to_channel` — The ID of the Zoom channel where you set the reminder.

        **Scopes:** `chat_message:write`,`chat_message:write:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatMessagesMessageIdReminderBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path=f"/chat/messages/{message_id}/reminder",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self,
        *,
        message_id: str,
        to_channel: typing.Optional[str] = None,
        to_contact: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Deletes a reminder.
        You must provide one of the following query parameters:
        - `to_contact` — The email address of the Zoom contact that you want to delete the reminder.
        - `to_channel` — The ID of the Zoom channel where you want to delete the reminder.

        **Scopes:** `chat_message:write:admin`,`chat_message:write`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if to_channel is not None:
            _query["to_channel"] = encode_query_param(to_channel, False)
        if to_contact is not None:
            _query["to_contact"] = encode_query_param(to_contact, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/messages/{message_id}/reminder",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncReminderClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: typing.Optional[params.PostChatMessagesMessageIdReminderBody] = None,
        message_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Creates a reminder for a person or a chat channel.

        You must provide one of the following query parameters:
        `to_contact` — The email address of the Zoom contact to whom you want to set the reminder.
        `to_channel` — The ID of the Zoom channel where you set the reminder.

        **Scopes:** `chat_message:write`,`chat_message:write:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatMessagesMessageIdReminderBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path=f"/chat/messages/{message_id}/reminder",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self,
        *,
        message_id: str,
        to_channel: typing.Optional[str] = None,
        to_contact: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Deletes a reminder.
        You must provide one of the following query parameters:
        - `to_contact` — The email address of the Zoom contact that you want to delete the reminder.
        - `to_channel` — The ID of the Zoom channel where you want to delete the reminder.

        **Scopes:** `chat_message:write:admin`,`chat_message:write`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if to_channel is not None:
            _query["to_channel"] = encode_query_param(to_channel, False)
        if to_contact is not None:
            _query["to_contact"] = encode_query_param(to_contact, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/messages/{message_id}/reminder",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
