"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from zoom_team_chat.types.chat.user.file import params, models
import typing
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
from zoom_team_chat.utils.request_body import to_encodable


class FileClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def send(
        self,
        *,
        data: typing.Optional[params.PostChatUsersUserIdMessagesFilesBody] = None,
        user_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatUsersUserIdMessagesFilesResponse:
        """
        Sends a file on Zoom to either an individual user in your contact list or a [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) of which you are a member.

         **Note:**
        * The base URL for this API is `https://file.zoom.us/v2/`.
        * The rate limit of this API is 20 requests per second per API or 2000 requests per second per IP address.
        * The caller must support HTTP 30x redirects.
        * All files are sent as common files except `png`,`jpg`,`jpeg` and `gif`
        * Zoom Cloud Storage will store the files sent through this API. If you do not use Zoom Cloud Storage, Zoom Cloud will temporarily store these files for 7 days.
        * The caller must retain the authorization header when redirected to a different hostname.

        For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.

         For an [account-level OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for **Chat Messages**.



        **Scopes:** `chat_message:write`,`chat_message:write:admin`

        **Granular Scopes:** `team_chat:write:message_files`,`team_chat:write:message_files:admin`
        """
        # start -- build request data (keep comment for code generation)
        _data = to_encodable(
            item=data, dump_with=params._SerializerPostChatUsersUserIdMessagesFilesBody
        )
        _files = params._SerializerPostChatUsersUserIdMessagesFilesBody.get_files_from_typed_dict(
            data
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path=f"/chat/users/{user_id}/messages/files",
            auth_names=["openapi_authorization", "openapi_oauth"],
            data=_data,
            files=_files,
            cast_to=models.PostChatUsersUserIdMessagesFilesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def upload(
        self,
        *,
        data: typing.Optional[params.PostChatUsersUserIdFilesBody] = None,
        user_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatUsersUserIdFilesResponse:
        """
        Uploads a file to chat.

         **Note:**
        * The base URL for this API's is `https://file.zoom.us/v2/`.
        * The rate limit of this API is 20 requests per second per API or 2000 requests per second per IP address.
        * The caller must support HTTP 30x redirects.
        * All files are sent as common files except `png`,`jpg`,`jpeg` and `gif`
        * Zoom Cloud Storage will store the files sent through this API. If you do not use Zoom Cloud Storage, Zoom Cloud will temporarily store these files for 7 days.
        * The caller must retain the authorization header when redirected to a different hostname.

         For an **account-level** [OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) that has the **Edit** permission for **Chat Messages**.



        **Scopes:** `chat_message:write`,`chat_message:write:admin`

        **Granular Scopes:** `team_chat:write:files`,`team_chat:write:files:admin`
        """
        # start -- build request data (keep comment for code generation)
        _data = to_encodable(
            item=data, dump_with=params._SerializerPostChatUsersUserIdFilesBody
        )
        _files = (
            params._SerializerPostChatUsersUserIdFilesBody.get_files_from_typed_dict(
                data
            )
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path=f"/chat/users/{user_id}/files",
            auth_names=["openapi_authorization", "openapi_oauth"],
            data=_data,
            files=_files,
            cast_to=models.PostChatUsersUserIdFilesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncFileClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def send(
        self,
        *,
        data: typing.Optional[params.PostChatUsersUserIdMessagesFilesBody] = None,
        user_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatUsersUserIdMessagesFilesResponse:
        """
        Sends a file on Zoom to either an individual user in your contact list or a [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) of which you are a member.

         **Note:**
        * The base URL for this API is `https://file.zoom.us/v2/`.
        * The rate limit of this API is 20 requests per second per API or 2000 requests per second per IP address.
        * The caller must support HTTP 30x redirects.
        * All files are sent as common files except `png`,`jpg`,`jpeg` and `gif`
        * Zoom Cloud Storage will store the files sent through this API. If you do not use Zoom Cloud Storage, Zoom Cloud will temporarily store these files for 7 days.
        * The caller must retain the authorization header when redirected to a different hostname.

        For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.

         For an [account-level OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for **Chat Messages**.



        **Scopes:** `chat_message:write`,`chat_message:write:admin`

        **Granular Scopes:** `team_chat:write:message_files`,`team_chat:write:message_files:admin`
        """
        # start -- build request data (keep comment for code generation)
        _data = to_encodable(
            item=data, dump_with=params._SerializerPostChatUsersUserIdMessagesFilesBody
        )
        _files = params._SerializerPostChatUsersUserIdMessagesFilesBody.get_files_from_typed_dict(
            data
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path=f"/chat/users/{user_id}/messages/files",
            auth_names=["openapi_authorization", "openapi_oauth"],
            data=_data,
            files=_files,
            cast_to=models.PostChatUsersUserIdMessagesFilesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def upload(
        self,
        *,
        data: typing.Optional[params.PostChatUsersUserIdFilesBody] = None,
        user_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatUsersUserIdFilesResponse:
        """
        Uploads a file to chat.

         **Note:**
        * The base URL for this API's is `https://file.zoom.us/v2/`.
        * The rate limit of this API is 20 requests per second per API or 2000 requests per second per IP address.
        * The caller must support HTTP 30x redirects.
        * All files are sent as common files except `png`,`jpg`,`jpeg` and `gif`
        * Zoom Cloud Storage will store the files sent through this API. If you do not use Zoom Cloud Storage, Zoom Cloud will temporarily store these files for 7 days.
        * The caller must retain the authorization header when redirected to a different hostname.

         For an **account-level** [OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), this API can only be used on behalf of a user who is assigned with a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) that has the **Edit** permission for **Chat Messages**.



        **Scopes:** `chat_message:write`,`chat_message:write:admin`

        **Granular Scopes:** `team_chat:write:files`,`team_chat:write:files:admin`
        """
        # start -- build request data (keep comment for code generation)
        _data = to_encodable(
            item=data, dump_with=params._SerializerPostChatUsersUserIdFilesBody
        )
        _files = (
            params._SerializerPostChatUsersUserIdFilesBody.get_files_from_typed_dict(
                data
            )
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path=f"/chat/users/{user_id}/files",
            auth_names=["openapi_authorization", "openapi_oauth"],
            data=_data,
            files=_files,
            cast_to=models.PostChatUsersUserIdFilesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
