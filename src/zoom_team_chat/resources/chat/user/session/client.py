"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import AsyncClientWrapper, SyncClientWrapper
import typing
import typing_extensions
from zoom_team_chat.utils.request_options import default_request_options, RequestOptions
from zoom_team_chat.types.chat.user.session import models
from zoom_team_chat.utils.query_params import QueryParamTypes, encode_query_param


class SessionClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        user_id: str,
        from_query: typing.Optional[str] = None,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        search_star: typing.Optional[bool] = None,
        to: typing.Optional[str] = None,
        type: typing.Optional[typing_extensions.Literal["1:1", "groupchat"]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Union[
        models.GetChatUsersUserIdSessionsResponseObj0,
        models.GetChatUsersUserIdSessionsResponseObj1,
    ]:
        """
        Retrieves a user's chat sessions. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.

        **Note:** For an **account-level** [OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), you can only use this API on behalf of a user who is assigned a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) that has the **View** or **Edit** permission for **Chat Messages**.


        **Scopes:** `chat_message:read`,`chat_message:read:admin`

        **Granular Scopes:** `team_chat:read:list_user_sessions`,`team_chat:read:list_user_sessions:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if from_query is not None:
            _query["from"] = encode_query_param(from_query, False)
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        if search_star is not None:
            _query["search_star"] = encode_query_param(search_star, False)
        if to is not None:
            _query["to"] = encode_query_param(to, False)
        if type is not None:
            _query["type"] = encode_query_param(type, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path=f"/chat/users/{user_id}/sessions",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=typing.Union[
                models.GetChatUsersUserIdSessionsResponseObj0,
                models.GetChatUsersUserIdSessionsResponseObj1,
            ],
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncSessionClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        user_id: str,
        from_query: typing.Optional[str] = None,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        search_star: typing.Optional[bool] = None,
        to: typing.Optional[str] = None,
        type: typing.Optional[typing_extensions.Literal["1:1", "groupchat"]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Union[
        models.GetChatUsersUserIdSessionsResponseObj0,
        models.GetChatUsersUserIdSessionsResponseObj1,
    ]:
        """
        Retrieves a user's chat sessions. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.

        **Note:** For an **account-level** [OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app), you can only use this API on behalf of a user who is assigned a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management#:~:text=Each%20user%20in%20a%20Zoom,owner%2C%20administrator%2C%20or%20member.&amp;text=Role%2Dbased%20access%20control%20enables,needs%20to%20view%20or%20edit.) that has the **View** or **Edit** permission for **Chat Messages**.


        **Scopes:** `chat_message:read`,`chat_message:read:admin`

        **Granular Scopes:** `team_chat:read:list_user_sessions`,`team_chat:read:list_user_sessions:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if from_query is not None:
            _query["from"] = encode_query_param(from_query, False)
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        if search_star is not None:
            _query["search_star"] = encode_query_param(search_star, False)
        if to is not None:
            _query["to"] = encode_query_param(to, False)
        if type is not None:
            _query["type"] = encode_query_param(type, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path=f"/chat/users/{user_id}/sessions",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=typing.Union[
                models.GetChatUsersUserIdSessionsResponseObj0,
                models.GetChatUsersUserIdSessionsResponseObj1,
            ],
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
