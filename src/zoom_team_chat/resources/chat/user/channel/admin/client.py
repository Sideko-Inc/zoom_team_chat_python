"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
import typing
from zoom_team_chat.utils.query_params import QueryParamTypes, encode_query_param
from zoom_team_chat.types.chat.user.channel.admin import params, models
from zoom_team_chat.utils.request_body import to_encodable


class AdminClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def promote(
        self,
        *,
        data: typing.Optional[
            params.PostChatUsersUserIdChannelsChannelIdAdminsBody
        ] = None,
        user_id: str,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatUsersUserIdChannelsChannelIdAdminsResponse:
        """
        Promote members to administrator role in a channel.

        For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.



        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:write:administrator:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerPostChatUsersUserIdChannelsChannelIdAdminsBody,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path=f"/chat/users/{user_id}/channels/{channel_id}/admins",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatUsersUserIdChannelsChannelIdAdminsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        user_id: str,
        channel_id: str,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatUsersUserIdChannelsChannelIdAdminsResponse:
        """
        Lists all administrators of a channel. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.



        **Scopes:** `chat_channel:read`,`chat_channel:read:admin`

        **Granular Scopes:** `team_chat:read:list_administrators:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path=f"/chat/users/{user_id}/channels/{channel_id}/admins",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatUsersUserIdChannelsChannelIdAdminsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def demote(
        self,
        *,
        user_id: str,
        channel_id: str,
        admin_ids: str,
        user_ids: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Demotes administrators in a channel in batch. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.



        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:delete:batch_administrators:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["admin_ids"] = encode_query_param(admin_ids, False)
        _query["user_ids"] = encode_query_param(user_ids, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/users/{user_id}/channels/{channel_id}/admins",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAdminClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def promote(
        self,
        *,
        data: typing.Optional[
            params.PostChatUsersUserIdChannelsChannelIdAdminsBody
        ] = None,
        user_id: str,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatUsersUserIdChannelsChannelIdAdminsResponse:
        """
        Promote members to administrator role in a channel.

        For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.



        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:write:administrator:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerPostChatUsersUserIdChannelsChannelIdAdminsBody,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path=f"/chat/users/{user_id}/channels/{channel_id}/admins",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatUsersUserIdChannelsChannelIdAdminsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        user_id: str,
        channel_id: str,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatUsersUserIdChannelsChannelIdAdminsResponse:
        """
        Lists all administrators of a channel. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.



        **Scopes:** `chat_channel:read`,`chat_channel:read:admin`

        **Granular Scopes:** `team_chat:read:list_administrators:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path=f"/chat/users/{user_id}/channels/{channel_id}/admins",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatUsersUserIdChannelsChannelIdAdminsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def demote(
        self,
        *,
        user_id: str,
        channel_id: str,
        admin_ids: str,
        user_ids: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Demotes administrators in a channel in batch. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.



        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:delete:batch_administrators:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["admin_ids"] = encode_query_param(admin_ids, False)
        _query["user_ids"] = encode_query_param(user_ids, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/users/{user_id}/channels/{channel_id}/admins",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
