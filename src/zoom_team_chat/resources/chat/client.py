"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
from zoom_team_chat.resources.chat.channel import AsyncChannelClient, ChannelClient
from zoom_team_chat.resources.chat.emoji import AsyncEmojiClient, EmojiClient
from zoom_team_chat.resources.chat.file import AsyncFileClient, FileClient
from zoom_team_chat.resources.chat.legalhold import (
    LegalholdClient,
    AsyncLegalholdClient,
)
from zoom_team_chat.resources.chat.message import MessageClient, AsyncMessageClient
from zoom_team_chat.resources.chat.space import AsyncSpaceClient, SpaceClient
from zoom_team_chat.resources.chat.user import AsyncUserClient, UserClient
from zoom_team_chat.resources.chat.invitiation import (
    AsyncInvitiationClient,
    InvitiationClient,
)
from zoom_team_chat.resources.chat.reminder import AsyncReminderClient, ReminderClient
from zoom_team_chat.resources.chat.migration import (
    MigrationClient,
    AsyncMigrationClient,
)


class ChatClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)
        self.channel = ChannelClient(client_wrapper=self._client_wrapper)
        self.emoji = EmojiClient(client_wrapper=self._client_wrapper)
        self.file = FileClient(client_wrapper=self._client_wrapper)
        self.legalhold = LegalholdClient(client_wrapper=self._client_wrapper)
        self.message = MessageClient(client_wrapper=self._client_wrapper)
        self.space = SpaceClient(client_wrapper=self._client_wrapper)
        self.user = UserClient(client_wrapper=self._client_wrapper)
        self.invitiation = InvitiationClient(client_wrapper=self._client_wrapper)
        self.reminder = ReminderClient(client_wrapper=self._client_wrapper)
        self.migration = MigrationClient(client_wrapper=self._client_wrapper)

    # register sync api methods (keep comment for code generation)


class AsyncChatClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)
        self.channel = AsyncChannelClient(client_wrapper=self._client_wrapper)
        self.emoji = AsyncEmojiClient(client_wrapper=self._client_wrapper)
        self.file = AsyncFileClient(client_wrapper=self._client_wrapper)
        self.legalhold = AsyncLegalholdClient(client_wrapper=self._client_wrapper)
        self.message = AsyncMessageClient(client_wrapper=self._client_wrapper)
        self.space = AsyncSpaceClient(client_wrapper=self._client_wrapper)
        self.user = AsyncUserClient(client_wrapper=self._client_wrapper)
        self.invitiation = AsyncInvitiationClient(client_wrapper=self._client_wrapper)
        self.reminder = AsyncReminderClient(client_wrapper=self._client_wrapper)
        self.migration = AsyncMigrationClient(client_wrapper=self._client_wrapper)

    # register async api methods (keep comment for code generation)
