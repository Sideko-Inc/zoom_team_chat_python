"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
from zoom_team_chat.resources.chat.legalhold.matter.file import (
    AsyncFileClient,
    FileClient,
)
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
import typing
from zoom_team_chat.types.chat.legalhold.matter import models, params
from zoom_team_chat.utils.query_params import encode_query_param, QueryParamTypes
from zoom_team_chat.utils.request_body import to_encodable


class MatterClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)
        self.file = FileClient(client_wrapper=self._client_wrapper)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: typing.Optional[params.PostChatLegalholdMattersBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatLegalholdMattersResponse:
        """
        Adds a new legal hold matter.

        **Scopes:** `chat_history_legal_hold:write:admin`

        **Granular Scopes:** `team_chat:write:legal_hold_matter:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `RESOURCE-INTENSIVE`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatLegalholdMattersBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path="/chat/legalhold/matters",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatLegalholdMattersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def update(
        self,
        *,
        data: typing.Optional[params.PatchChatLegalholdMattersMatterIdBody] = None,
        matter_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Updates the name for a given legal hold matter.

        **Scopes:** `chat_history_legal_hold:write:admin`

        **Granular Scopes:** `team_chat:update:legal_hold_matter:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPatchChatLegalholdMattersMatterIdBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="PATCH",
            path=f"/chat/legalhold/matters/{matter_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatLegalholdMattersResponse:
        """
        Returns a list of legal hold matters.

        **Scopes:** `chat_history_legal_hold:read:admin`,`chat_history_legal_hold:write:admin`

        **Granular Scopes:** `team_chat:read:list_legal_hold_matters:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `RESOURCE-INTENSIVE`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path="/chat/legalhold/matters",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatLegalholdMattersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, matter_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Deletes a legal hold matter.

        **Scopes:** `chat_history_legal_hold:write:admin`

        **Granular Scopes:** `team_chat:delete:legal_hold_matter:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/legalhold/matters/{matter_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncMatterClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)
        self.file = AsyncFileClient(client_wrapper=self._client_wrapper)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: typing.Optional[params.PostChatLegalholdMattersBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatLegalholdMattersResponse:
        """
        Adds a new legal hold matter.

        **Scopes:** `chat_history_legal_hold:write:admin`

        **Granular Scopes:** `team_chat:write:legal_hold_matter:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `RESOURCE-INTENSIVE`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatLegalholdMattersBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path="/chat/legalhold/matters",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatLegalholdMattersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def update(
        self,
        *,
        data: typing.Optional[params.PatchChatLegalholdMattersMatterIdBody] = None,
        matter_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Updates the name for a given legal hold matter.

        **Scopes:** `chat_history_legal_hold:write:admin`

        **Granular Scopes:** `team_chat:update:legal_hold_matter:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPatchChatLegalholdMattersMatterIdBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="PATCH",
            path=f"/chat/legalhold/matters/{matter_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatLegalholdMattersResponse:
        """
        Returns a list of legal hold matters.

        **Scopes:** `chat_history_legal_hold:read:admin`,`chat_history_legal_hold:write:admin`

        **Granular Scopes:** `team_chat:read:list_legal_hold_matters:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `RESOURCE-INTENSIVE`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path="/chat/legalhold/matters",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatLegalholdMattersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, matter_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Deletes a legal hold matter.

        **Scopes:** `chat_history_legal_hold:write:admin`

        **Granular Scopes:** `team_chat:delete:legal_hold_matter:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/legalhold/matters/{matter_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
