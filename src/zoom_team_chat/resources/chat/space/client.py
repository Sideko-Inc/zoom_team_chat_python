"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from zoom_team_chat.resources.chat.space.admin import AsyncAdminClient, AdminClient
from zoom_team_chat.resources.chat.space.channel import (
    AsyncChannelClient,
    ChannelClient,
)
from zoom_team_chat.utils.request_options import default_request_options, RequestOptions
import typing
from zoom_team_chat.types.chat.space import params, models
from zoom_team_chat.utils.query_params import encode_query_param, QueryParamTypes
from zoom_team_chat.utils.request_body import to_encodable


class SpaceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)
        self.admin = AdminClient(client_wrapper=self._client_wrapper)
        self.channel = ChannelClient(client_wrapper=self._client_wrapper)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: typing.Optional[params.PostChatSpacesBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatSpacesResponse:
        """
        Creates a shared space.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:write:shared_space`,`team_chat:write:shared_space:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `RESOURCE-INTENSIVE`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerPostChatSpacesBody)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path="/chat/spaces",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatSpacesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def transfer_owner(
        self,
        *,
        space_id: str,
        identifier: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Transfers shared space ownership to a member or administrator.

         **Note:** This API supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:update:shared_space_owner`,`team_chat:update:shared_space_owner:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["identifier"] = encode_query_param(identifier, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="PATCH",
            path=f"/chat/spaces/{space_id}/owner",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def update(
        self,
        *,
        data: typing.Optional[params.PatchChatSpacesSpaceIdBody] = None,
        space_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Updates a shared space's settings. Shared space owner can update `space_name`, `space_description`, and `space_settings`. Space admins can only update `space_name` and `space_description` unless the admin is also the space owner.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:update:shared_space`,`team_chat:update:shared_space:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPatchChatSpacesSpaceIdBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="PATCH",
            path=f"/chat/spaces/{space_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self, *, space_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> models.GetChatSpacesSpaceIdResponse:
        """
        Returns information about a shared space.

        **Scopes:** `chat:read:admin`,`chat:read`,`chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:read:shared_space`,`team_chat:read:shared_space:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path=f"/chat/spaces/{space_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=models.GetChatSpacesSpaceIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        user_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatSpacesResponse:
        """
        Returns a list shared spaces.

        **Scopes:** `chat:write:admin`,`chat:read:admin`,`chat:write`,`chat:read`

        **Granular Scopes:** `team_chat:read:list_shared_spaces`,`team_chat:read:list_shared_spaces:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        if user_id is not None:
            _query["user_id"] = encode_query_param(user_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path="/chat/spaces",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatSpacesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, space_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Deletes a shared space. This API endpoint works for user-level and account-level apps.

        **Note:** For user-level apps, the user calling this API must be the shared space owner.
        **Note:** For account-level apps, the user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:delete:shared_space`,`team_chat:delete:shared_space:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `RESOURCE-INTENSIVE`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/spaces/{space_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncSpaceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)
        self.admin = AsyncAdminClient(client_wrapper=self._client_wrapper)
        self.channel = AsyncChannelClient(client_wrapper=self._client_wrapper)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: typing.Optional[params.PostChatSpacesBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatSpacesResponse:
        """
        Creates a shared space.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:write:shared_space`,`team_chat:write:shared_space:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `RESOURCE-INTENSIVE`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerPostChatSpacesBody)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path="/chat/spaces",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatSpacesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def transfer_owner(
        self,
        *,
        space_id: str,
        identifier: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Transfers shared space ownership to a member or administrator.

         **Note:** This API supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:update:shared_space_owner`,`team_chat:update:shared_space_owner:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["identifier"] = encode_query_param(identifier, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="PATCH",
            path=f"/chat/spaces/{space_id}/owner",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def update(
        self,
        *,
        data: typing.Optional[params.PatchChatSpacesSpaceIdBody] = None,
        space_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Updates a shared space's settings. Shared space owner can update `space_name`, `space_description`, and `space_settings`. Space admins can only update `space_name` and `space_description` unless the admin is also the space owner.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:update:shared_space`,`team_chat:update:shared_space:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPatchChatSpacesSpaceIdBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="PATCH",
            path=f"/chat/spaces/{space_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self, *, space_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> models.GetChatSpacesSpaceIdResponse:
        """
        Returns information about a shared space.

        **Scopes:** `chat:read:admin`,`chat:read`,`chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:read:shared_space`,`team_chat:read:shared_space:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path=f"/chat/spaces/{space_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=models.GetChatSpacesSpaceIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        user_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatSpacesResponse:
        """
        Returns a list shared spaces.

        **Scopes:** `chat:write:admin`,`chat:read:admin`,`chat:write`,`chat:read`

        **Granular Scopes:** `team_chat:read:list_shared_spaces`,`team_chat:read:list_shared_spaces:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        if user_id is not None:
            _query["user_id"] = encode_query_param(user_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path="/chat/spaces",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatSpacesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, space_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Deletes a shared space. This API endpoint works for user-level and account-level apps.

        **Note:** For user-level apps, the user calling this API must be the shared space owner.
        **Note:** For account-level apps, the user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:delete:shared_space`,`team_chat:delete:shared_space:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `RESOURCE-INTENSIVE`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/spaces/{space_id}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
