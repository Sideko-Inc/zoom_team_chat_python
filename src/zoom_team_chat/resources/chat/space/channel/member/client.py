"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
import typing
from zoom_team_chat.types.chat.space.channel.member import models, params
from zoom_team_chat.utils.query_params import encode_query_param, QueryParamTypes
import typing_extensions
from zoom_team_chat.utils.request_body import to_encodable


class MemberClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: typing.Optional[params.PostChatSpacesSpaceIdMembersBody] = None,
        space_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatSpacesSpaceIdMembersResponse:
        """
        Adds members to a shared space.

        **Note:** This API supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:write:shared_space_members`,`team_chat:write:shared_space_members:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatSpacesSpaceIdMembersBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path=f"/chat/spaces/{space_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatSpacesSpaceIdMembersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        space_id: str,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        role: typing.Optional[
            typing_extensions.Literal["all", "member", "owner", "admin"]
        ] = None,
        status: typing.Optional[
            typing_extensions.Literal["all", "active", "inactive"]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatSpacesSpaceIdMembersResponse:
        """
        Returns a list of members in a shared space.

        **Scopes:** `chat:write:admin`,`chat:read:admin`,`chat:write`,`chat:read`

        **Granular Scopes:** `team_chat:read:list_shared_space_members`,`team_chat:read:list_shared_space_members:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        if role is not None:
            _query["role"] = encode_query_param(role, False)
        if status is not None:
            _query["status"] = encode_query_param(status, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path=f"/chat/spaces/{space_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatSpacesSpaceIdMembersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self,
        *,
        space_id: str,
        identifiers: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.DeleteChatSpacesSpaceIdMembersResponse:
        """
        Removes members from a shared space.

        **Note:** This API supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:delete:shared_space_members`,`team_chat:delete:shared_space_members:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["identifiers"] = encode_query_param(identifiers, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/spaces/{space_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.DeleteChatSpacesSpaceIdMembersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncMemberClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: typing.Optional[params.PostChatSpacesSpaceIdMembersBody] = None,
        space_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatSpacesSpaceIdMembersResponse:
        """
        Adds members to a shared space.

        **Note:** This API supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:write:shared_space_members`,`team_chat:write:shared_space_members:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatSpacesSpaceIdMembersBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path=f"/chat/spaces/{space_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatSpacesSpaceIdMembersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        space_id: str,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        role: typing.Optional[
            typing_extensions.Literal["all", "member", "owner", "admin"]
        ] = None,
        status: typing.Optional[
            typing_extensions.Literal["all", "active", "inactive"]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatSpacesSpaceIdMembersResponse:
        """
        Returns a list of members in a shared space.

        **Scopes:** `chat:write:admin`,`chat:read:admin`,`chat:write`,`chat:read`

        **Granular Scopes:** `team_chat:read:list_shared_space_members`,`team_chat:read:list_shared_space_members:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        if role is not None:
            _query["role"] = encode_query_param(role, False)
        if status is not None:
            _query["status"] = encode_query_param(status, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path=f"/chat/spaces/{space_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatSpacesSpaceIdMembersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self,
        *,
        space_id: str,
        identifiers: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.DeleteChatSpacesSpaceIdMembersResponse:
        """
        Removes members from a shared space.

        **Note:** This API supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:delete:shared_space_members`,`team_chat:delete:shared_space_members:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["identifiers"] = encode_query_param(identifiers, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/spaces/{space_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.DeleteChatSpacesSpaceIdMembersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
