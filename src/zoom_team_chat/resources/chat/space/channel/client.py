"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
from zoom_team_chat.resources.chat.space.channel.member import (
    MemberClient,
    AsyncMemberClient,
)
import typing
from zoom_team_chat.utils.request_options import default_request_options, RequestOptions
from zoom_team_chat.types.chat.space.channel import params, models
from zoom_team_chat.utils.query_params import encode_query_param, QueryParamTypes
from zoom_team_chat.utils.request_body import to_encodable


class ChannelClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)
        self.member = MemberClient(client_wrapper=self._client_wrapper)

    # register sync api methods (keep comment for code generation)
    def move(
        self,
        *,
        data: typing.Optional[params.PatchChatSpacesSpaceIdChannelsBody] = None,
        space_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PatchChatSpacesSpaceIdChannelsResponse:
        """
        Moves one or more channels in or out of a shared space.


        **Scopes:** `chat:write`

        **Granular Scopes:** `team_chat:update:shared_space_channels`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPatchChatSpacesSpaceIdChannelsBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="PATCH",
            path=f"/chat/spaces/{space_id}/channels",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PatchChatSpacesSpaceIdChannelsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        space_id: str,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatSpacesSpaceIdChannelsResponse:
        """
        Returns a list of channels for a shared space.

        **Scopes:** `chat:write:admin`,`chat:read:admin`,`chat:write`,`chat:read`

        **Granular Scopes:** `team_chat:read:list_shared_space_channels`,`team_chat:read:list_shared_space_channels:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path=f"/chat/spaces/{space_id}/channels",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatSpacesSpaceIdChannelsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncChannelClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)
        self.member = AsyncMemberClient(client_wrapper=self._client_wrapper)

    # register async api methods (keep comment for code generation)
    async def move(
        self,
        *,
        data: typing.Optional[params.PatchChatSpacesSpaceIdChannelsBody] = None,
        space_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PatchChatSpacesSpaceIdChannelsResponse:
        """
        Moves one or more channels in or out of a shared space.


        **Scopes:** `chat:write`

        **Granular Scopes:** `team_chat:update:shared_space_channels`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPatchChatSpacesSpaceIdChannelsBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="PATCH",
            path=f"/chat/spaces/{space_id}/channels",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PatchChatSpacesSpaceIdChannelsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        space_id: str,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatSpacesSpaceIdChannelsResponse:
        """
        Returns a list of channels for a shared space.

        **Scopes:** `chat:write:admin`,`chat:read:admin`,`chat:write`,`chat:read`

        **Granular Scopes:** `team_chat:read:list_shared_space_channels`,`team_chat:read:list_shared_space_channels:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path=f"/chat/spaces/{space_id}/channels",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatSpacesSpaceIdChannelsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
