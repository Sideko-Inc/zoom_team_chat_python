"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
from zoom_team_chat.utils.request_options import default_request_options, RequestOptions
import typing
from zoom_team_chat.types.chat.space.admin import models, params
from zoom_team_chat.utils.query_params import QueryParamTypes, encode_query_param
from zoom_team_chat.utils.request_body import to_encodable


class AdminClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def promote(
        self,
        *,
        data: typing.Optional[params.PostChatSpacesSpaceIdAdminsBody] = None,
        space_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatSpacesSpaceIdAdminsResponse:
        """
        Promotes shared space members to administrators.

        **Note:** This API supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:write:shared_space_administrators`,`team_chat:write:shared_space_administrators:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatSpacesSpaceIdAdminsBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path=f"/chat/spaces/{space_id}/admins",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatSpacesSpaceIdAdminsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def demote(
        self,
        *,
        space_id: str,
        identifiers: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.DeleteChatSpacesSpaceIdAdminsResponse:
        """
        Demotes shared space administrators to members.

        **Note:** This API supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:delete:shared_space_administrators`,`team_chat:delete:shared_space_administrators:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["identifiers"] = encode_query_param(identifiers, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/spaces/{space_id}/admins",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.DeleteChatSpacesSpaceIdAdminsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAdminClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def promote(
        self,
        *,
        data: typing.Optional[params.PostChatSpacesSpaceIdAdminsBody] = None,
        space_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatSpacesSpaceIdAdminsResponse:
        """
        Promotes shared space members to administrators.

        **Note:** This API supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:write:shared_space_administrators`,`team_chat:write:shared_space_administrators:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatSpacesSpaceIdAdminsBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path=f"/chat/spaces/{space_id}/admins",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatSpacesSpaceIdAdminsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def demote(
        self,
        *,
        space_id: str,
        identifiers: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.DeleteChatSpacesSpaceIdAdminsResponse:
        """
        Demotes shared space administrators to members.

        **Note:** This API supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat:write`,`chat:write:admin`

        **Granular Scopes:** `team_chat:delete:shared_space_administrators`,`team_chat:delete:shared_space_administrators:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["identifiers"] = encode_query_param(identifiers, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/spaces/{space_id}/admins",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.DeleteChatSpacesSpaceIdAdminsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
