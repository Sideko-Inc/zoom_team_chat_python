"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
import typing
from zoom_team_chat.types.chat.channel.retention import params, models
from zoom_team_chat.utils.request_body import to_encodable


class RetentionClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def update(
        self,
        *,
        data: typing.Optional[params.PatchChatChannelsChannelIdRetentionBody] = None,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Updates the retention policy of a channel.

        **Note:** This API only supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat_channel:write:admin`

        **Granular Scopes:** `team_chat:update:retention:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerPatchChatChannelsChannelIdRetentionBody,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="PATCH",
            path=f"/chat/channels/{channel_id}/retention",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatChannelsChannelIdRetentionResponse:
        """
        Returns the retention policy of a channel.

        **Note:** This API only supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **View** or **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat_channel:read:admin`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:read:retention:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path=f"/chat/channels/{channel_id}/retention",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=models.GetChatChannelsChannelIdRetentionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncRetentionClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def update(
        self,
        *,
        data: typing.Optional[params.PatchChatChannelsChannelIdRetentionBody] = None,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Updates the retention policy of a channel.

        **Note:** This API only supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat_channel:write:admin`

        **Granular Scopes:** `team_chat:update:retention:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerPatchChatChannelsChannelIdRetentionBody,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="PATCH",
            path=f"/chat/channels/{channel_id}/retention",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatChannelsChannelIdRetentionResponse:
        """
        Returns the retention policy of a channel.

        **Note:** This API only supports account-level apps. The user calling this API must have a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Using-role-management) that has the **View** or **Edit** permission for the **Chat Channels** feature.

        **Scopes:** `chat_channel:read:admin`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:read:retention:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path=f"/chat/channels/{channel_id}/retention",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=models.GetChatChannelsChannelIdRetentionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
