"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
from zoom_team_chat.utils.request_options import default_request_options, RequestOptions
import typing
from zoom_team_chat.types.chat.channel.member.me import models


class MeClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def join(
        self,
        *,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatChannelsChannelIdMembersMeResponse:
        """
        Joins a channel that is open for anyone in the same organization to join. A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or more members. You cannot use this API to join private channels that only allow invited members to be a part of them.

        **Note:** This API only supports **user-managed** [OAuth-app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app).


        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:write:member`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path=f"/chat/channels/{channel_id}/members/me",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=models.PostChatChannelsChannelIdMembersMeResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def leave(
        self,
        *,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Leaves a specific channel. If you're no longer interested in being a member of an existing channel, you can leave the channel at any time. After leaving the channel, you can no longer access information from that channel.

        **Note:** This API only supports **user-managed** [OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app)


        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:delete:member`,`team_chat:delete:member:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/channels/{channel_id}/members/me",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncMeClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def join(
        self,
        *,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatChannelsChannelIdMembersMeResponse:
        """
        Joins a channel that is open for anyone in the same organization to join. A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or more members. You cannot use this API to join private channels that only allow invited members to be a part of them.

        **Note:** This API only supports **user-managed** [OAuth-app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app).


        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:write:member`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path=f"/chat/channels/{channel_id}/members/me",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=models.PostChatChannelsChannelIdMembersMeResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def leave(
        self,
        *,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Leaves a specific channel. If you're no longer interested in being a member of an existing channel, you can leave the channel at any time. After leaving the channel, you can no longer access information from that channel.

        **Note:** This API only supports **user-managed** [OAuth app](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-oauth-app)


        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:delete:member`,`team_chat:delete:member:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/channels/{channel_id}/members/me",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
