"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from zoom_team_chat.resources.chat.channel.member.group import (
    AsyncGroupClient,
    GroupClient,
)
from zoom_team_chat.resources.chat.channel.member.me import MeClient, AsyncMeClient
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
import typing
from zoom_team_chat.utils.query_params import QueryParamTypes, encode_query_param
from zoom_team_chat.types.chat.channel.member import params, models
from zoom_team_chat.utils.request_body import to_encodable


class MemberClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)
        self.group = GroupClient(client_wrapper=self._client_wrapper)
        self.me = MeClient(client_wrapper=self._client_wrapper)

    # register sync api methods (keep comment for code generation)
    def invite(
        self,
        *,
        data: typing.Optional[params.PostChatChannelsChannelIdMembersBody] = None,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatChannelsChannelIdMembersResponse:
        """
        Invites members that are in a user's contact list to a channel. A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. The maximum number of members that can be added at once with this API is 5.



        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:write:members`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatChannelsChannelIdMembersBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path=f"/chat/channels/{channel_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatChannelsChannelIdMembersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        channel_id: str,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatChannelsChannelIdMembersResponse:
        """
        Lists all members of a channel.



        **Scopes:** `chat_channel:read`,`chat_channel:write`,`chat_channel:read:admin`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:read:list_members`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="GET",
            path=f"/chat/channels/{channel_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatChannelsChannelIdMembersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self,
        *,
        channel_id: str,
        identifier: typing.Union[str, str, str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
         Removes a member from a chat channel. A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or many members.




        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:delete:member`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/channels/{channel_id}/members/{identifier}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def batch_delete(
        self,
        *,
        channel_id: str,
        member_ids: str,
        user_ids: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Removes multiple members from a chat channel in a batch. A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or many members.




        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:delete:batch_members`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["member_ids"] = encode_query_param(member_ids, False)
        _query["user_ids"] = encode_query_param(user_ids, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/channels/{channel_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncMemberClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)
        self.group = AsyncGroupClient(client_wrapper=self._client_wrapper)
        self.me = AsyncMeClient(client_wrapper=self._client_wrapper)

    # register async api methods (keep comment for code generation)
    async def invite(
        self,
        *,
        data: typing.Optional[params.PostChatChannelsChannelIdMembersBody] = None,
        channel_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatChannelsChannelIdMembersResponse:
        """
        Invites members that are in a user's contact list to a channel. A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or multiple members. The maximum number of members that can be added at once with this API is 5.



        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:write:members`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatChannelsChannelIdMembersBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path=f"/chat/channels/{channel_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatChannelsChannelIdMembersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        channel_id: str,
        next_page_token: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetChatChannelsChannelIdMembersResponse:
        """
        Lists all members of a channel.



        **Scopes:** `chat_channel:read`,`chat_channel:write`,`chat_channel:read:admin`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:read:list_members`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        if next_page_token is not None:
            _query["next_page_token"] = encode_query_param(next_page_token, False)
        if page_size is not None:
            _query["page_size"] = encode_query_param(page_size, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="GET",
            path=f"/chat/channels/{channel_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=models.GetChatChannelsChannelIdMembersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self,
        *,
        channel_id: str,
        identifier: typing.Union[str, str, str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
         Removes a member from a chat channel. A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or many members.




        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:delete:member`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/channels/{channel_id}/members/{identifier}",
            auth_names=["openapi_authorization", "openapi_oauth"],
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def batch_delete(
        self,
        *,
        channel_id: str,
        member_ids: str,
        user_ids: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Removes multiple members from a chat channel in a batch. A [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-) can have one or many members.




        **Scopes:** `chat_channel:write`,`chat_channel:write:admin`

        **Granular Scopes:** `team_chat:delete:batch_members`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        # start -- build request data (keep comment for code generation)
        _query: typing.Dict[str, QueryParamTypes] = {}
        _query["member_ids"] = encode_query_param(member_ids, False)
        _query["user_ids"] = encode_query_param(user_ids, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="DELETE",
            path=f"/chat/channels/{channel_id}/members",
            auth_names=["openapi_authorization", "openapi_oauth"],
            query_params=_query,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
