"""File Generated by Sideko (sideko.dev)"""

from zoom_team_chat.utils.client_wrapper import SyncClientWrapper, AsyncClientWrapper
from zoom_team_chat.resources.chat.migration.channel import (
    ChannelClient,
    AsyncChannelClient,
)
from zoom_team_chat.resources.chat.migration.user import UserClient, AsyncUserClient
from zoom_team_chat.types.chat.migration import models, params
import typing
from zoom_team_chat.utils.request_options import RequestOptions, default_request_options
from zoom_team_chat.utils.request_body import to_encodable


class MigrationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register sync resources (keep comment for code generation)
        self.channel = ChannelClient(client_wrapper=self._client_wrapper)
        self.user = UserClient(client_wrapper=self._client_wrapper)

    # register sync api methods (keep comment for code generation)
    def migrate_messages(
        self,
        *,
        data: typing.Optional[params.PostChatMigrationMessagesBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatMigrationMessagesResponse:
        """
        Adds a maximum of 20 messages to migrated 1:1 conversations or channels.

        **Note**: The use of this endpoint is **locked**.  We make it available upon request on a case by case basis. To unlock this endpoint, contact [Zoom Support](https://support.zoom.com/hc/en/contact?id=contact_us).

        **Scopes:** `chat_migration:write:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatMigrationMessagesBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path="/chat/migration/messages",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatMigrationMessagesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def migrate_reactions(
        self,
        *,
        data: typing.Optional[params.PostChatMigrationEmojiReactionsBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Adds emoji reactions to a migrated chat message.

        **Note**: The use of this endpoint is **locked**.  We make it available upon request on a case by case basis. To unlock this endpoint, contact [Zoom Support](https://support.zoom.com/hc/en/contact?id=contact_us).

        **Scopes:** `chat_migration:write:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatMigrationEmojiReactionsBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._client_wrapper.request(
            method="POST",
            path="/chat/migration/emoji_reactions",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncMigrationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        # register async resources (keep comment for code generation)
        self.channel = AsyncChannelClient(client_wrapper=self._client_wrapper)
        self.user = AsyncUserClient(client_wrapper=self._client_wrapper)

    # register async api methods (keep comment for code generation)
    async def migrate_messages(
        self,
        *,
        data: typing.Optional[params.PostChatMigrationMessagesBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostChatMigrationMessagesResponse:
        """
        Adds a maximum of 20 messages to migrated 1:1 conversations or channels.

        **Note**: The use of this endpoint is **locked**.  We make it available upon request on a case by case basis. To unlock this endpoint, contact [Zoom Support](https://support.zoom.com/hc/en/contact?id=contact_us).

        **Scopes:** `chat_migration:write:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatMigrationMessagesBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path="/chat/migration/messages",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=models.PostChatMigrationMessagesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def migrate_reactions(
        self,
        *,
        data: typing.Optional[params.PostChatMigrationEmojiReactionsBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Adds emoji reactions to a migrated chat message.

        **Note**: The use of this endpoint is **locked**.  We make it available upon request on a case by case basis. To unlock this endpoint, contact [Zoom Support](https://support.zoom.com/hc/en/contact?id=contact_us).

        **Scopes:** `chat_migration:write:admin`

        **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostChatMigrationEmojiReactionsBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._client_wrapper.request(
            method="POST",
            path="/chat/migration/emoji_reactions",
            auth_names=["openapi_authorization", "openapi_oauth"],
            json=_json,
            cast_to=None,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
